1. between ~ and ~ ;
 ex) 

 select * from sample200 where no between 3 and 5;



2. 풀 테이블 스캔(full table scan) - 순차 검색

 - 인덱스가 지정되지 않은 테이블을 검색할 때는 풀 테이블 스캔이라 불리는 검색 방법을 사용한다. 
   처리방법은 단순한데, 테이블에 저장된 모든 값을 처음부터 차례로 조사해나가는 것이다. 
   아주 단순한 검색방법으로, 행이 1,000건 있다면 최대 1,000번 값을 비교한다.

3. 이진 탐색(binary search) - 정렬이 되어 있어야 한다

 - 이진 탐색은 차례로 나열된 집합에 대해 유효한 검색 방법이다. 
   처음부터 순서대로 조사하는 것이 아니고 집합을 반으로 나누어 조사하는 검색방법이다.

 - 이진 탐색은 고속으로 검색할 수 있는 탐색 방법이지만 데이터가 미리 정렬되어 있어야 한다. 
    하지만 테이블 내의 행을 언제나 정렬된 상태로 두는 것은 힘든 작업이다.

4. 이진 트리(binary tree)

 - 일반적으로는 테이블에 인덱스를 작성하면 테이블 데이터와 별개로 인덱스용 데이터가 저장장치에 만들어 진다. 
    이때 이진 트리라는 데이터 구조로 작성된다.

 - 이진 트리의 구조를 살피다 보면, 같은 값을 가지는 노드가 여러 개 있을 때의 결과에 대한 의문이 생길 수 있다. 
   사실 이진 트리에서는 집합 내에 중복하는 값을 가질 수 없다. 
   
 - 즉, 노드의 가지는 큰 쪽과 작은쪽의 두 가지로 나뉘며, 같은 값을 허용하기 위해서는 '같은'이라는 제3의 노드를 가질 필요가 있다.
    하지만, 이진 트리에서 '같은 값을 가지는 노드를 여러 개 만들 수 없다'라는 특성은 
    키에 대하여 유일성을 가지게 할 경우에만 유용하다. 
    그래서 기본키 제약은 이진 트리로 인덱스를 작성하는 데이터베이스가 많은 것 같다.

* 이진 트리에는 중복하는 값을 등록할 수 없다!


5. EXPLAIN

 - 인덱스 작성을 통해 쿼리의 성능 향상을 기대할 수 있다. 
   이때 실제로 인덱스를 사용해 검색하는지를 확인하려면 EXPLAIN 명령을 사용한다.

 - SYNTAX EXPLAIN
   EXPLAIN SQL 명령

 - EXPLAIN 명령의 문법은 간단하다. 
   EXPLAIN에 뒤이어 확인하고 싶은 SELECT 명령 등의 SQL 명령을 지정하면 된다.



6.