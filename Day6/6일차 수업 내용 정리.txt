1. 인스턴스 메소드(instance methods)와 정적 메소드(static methods)의 차이

  - 인스턴스 메소드(Instance Method)는 소위 우리가 일반적으로 정의하고 사용하는 메소드이다. 
    호출하기 위해서는 반드시 해당 메소드가 정의되어 있는 클래스의 객체를 먼저 생성해주어야 한다.

  - 정적 메소드(static method)는 클래스로 객체를 생성하지 않아도 호출이 가능한 메소드다. 
    정적 메소드는 해당 메소드가 정의되어 있는 클래스의 이름이나 생성된 객체 통해 호출할 수 있다.

  - 정적 메소드는 언제 쓰이는가?
    Math 클래스와 같은 상태를 가지고 있지 않은 유틸리티 클래스를 만들때 주로 사용 된다.

    1) 변화를 가정하지 않는다.
    2) *메소드가 인스턴스 변수를 사용하지 않는다.* 
    3) 인스턴스 생성에 의존하지 않는다.
    4) 메소드가 공유되고 있다면, 정적 메소드로 추출해낼 수 있다.
    5) 메소드가 변화되지 않고, 오버라이딩 되지 않는다.


-> 더 자세한건 여기 참고 : 
    https://ykh6242.tistory.com/entry/Java-인스턴스-메소드instance-methods와-정적-메소드static-methods의-차이



2. 메시지 패싱 이란?

 - 하나의 객체가 다른 하나의 객체에게 메시지를 전달하는 방법은(어떠한 행위의 요구를 위한 메시지
   전달) 메소드 호출을 기반으로 한다. 그래서 객체지향에서는 이러한 형태의 메소드 호출을 가리켜
   ‘메시지 전달(Message Passing)’이라 한다.

예시 : https://blog.naver.com/clown7942/110108096425

3. 생성자란?

 - 생성자(Constructor)는 객체가 생성될때 자동으로 호출되는 
   특수 목적의 멤버함수(메소드)로 객체의 초기화를 위해 사용됩니다. 

 - 생성자의 특징

   1) 생성자의 이름은 클래스 이름과 동일해야 합니다.

   2) 생성자는 다른 멤버함수(메소드)와는 다르게 리턴 타입이 없습니다. 

   3) 생성자는 객체가 생성될때 자동으로 한번 호출됩니다. 

   4) 생성자는 매개변수 조건에 따라 여러개를 작성할 수 있습니다. (오버로딩)

   5) 생성자는 클래스에 최소 1개는 있어야 하며, 생성자 코드가 없을 경우 
      컴파일러가 기본생성자를 자동으로 생성합니다. 
    **(주의할점은, 생성자 코드가 1개라도 작성되어 있다면, 컴파일러는 기본생성자가 없다고 하더라도 
       기본생성자를 자동으로 생성하지 않습니다.)

   6) 생성자는 다른 메서드 내에서 다른 생성자 호출이 불가능 하지만 생성자 내에서는 상관 없다.