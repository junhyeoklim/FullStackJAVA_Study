1.DAO, DTO, VO와 @Repository, @Service, @Controller의 관계
 - @Repository와 DAO (Data Access Object)
@Repository는 DAO의 역할을 하는 클래스에 사용됩니다. 
DAO는 데이터베이스와의 상호작용을 캡슐화하여 데이터 접근 로직과 비즈니스 로직을 분리합니다.
@Repository 어노테이션은 이러한 DAO 컴포넌트를 스프링 컨테이너에 빈으로 등록하고, 
  데이터베이스 예외를 스프링의 일관된 예외로 변환하는 역할을 수행합니다.


 - @Service와 비즈니스 로직
DTO (Data Transfer Object)와 VO (Value Object)는 @Service 계층에서 주로 처리됩니다. 
DTO는 계층 간 데이터 교환을 위해 사용되며, VO는 값을 표현하는 데 사용됩니다. 
@Service 어노테이션은 비즈니스 로직을 수행하는 서비스 계층의 클래스에 사용됩니다. 
이 계층에서 DTO 또는 VO를 생성하고 데이터를 처리하여 
Controller로 전달하거나 DAO로부터 받은 데이터를 DTO나 VO로 변환합니다.


 - @Controller와 사용자 인터페이스
@Controller는 사용자 인터페이스와 직접 상호작용하는 웹 계층의 컴포넌트에 사용됩니다. 
이 계층에서는 DTO나 VO를 사용하여 뷰에 데이터를 전달하거나 뷰로부터 데이터를 받아 처리합니다. 
@Controller 어노테이션은 클라이언트의 요청을 처리하고 응답을 반환하는 웹 컨트롤러에 주로 사용됩니다.


3. DTO와 VO의 차이점
 DTO와 VO는 둘 다 데이터를 전달하는 객체지만, 사용 목적과 범위에 차이가 있습니다.


 - DTO (Data Transfer Object)
DTO는 다양한 계층 간 데이터 전송을 위해 사용됩니다. 
일반적으로 다수의 데이터 필드를 포함하며, 
서로 다른 계층(예: 웹 계층, 서비스 계층, 데이터 접근 계층) 간 데이터 교환에 사용됩니다. 
DTO는 상태나 행위보다는 데이터 전송에 초점을 맞춥니다.


 - VO (Value Object)
VO는 값을 표현하기 위해 사용되며, 불변성을 가질 수 있습니다. 
VO는 주로 도메인 모델에서 비즈니스 개념을 표현하는 데 사용되며, 
같은 값이면 같은 엔티티로 간주됩니다. 
예를 들어, 돈, 날짜 범위, 복합 주소 등이 VO로 표현될 수 있습니다.


