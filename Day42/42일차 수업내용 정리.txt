
1. sql문 처리 순서

 - 2번(FROM 절) -> 3번(WHERE 절) -> 4번(GROUP BY절) -> 5번(HAVING 절) 
    -> 1번(SELECT 절) -> 6번(ORDER BY절) 순으로 처리가 진행된다.



2. group by 절

 - 그룹별로 검색을 할 때 사용된다. 
   group by절을 사용할 때는 그룹 함수를 같이 사용해야 한다. 
   대표적인 그룹 함수에는 count(), avg(), min(), max(), sum()등이 있다



3. having 절

 - having 절과 where 절을 서로 비교할 수 있는데, 그 차이점은 where 절은 from 절에서 생성된 중간 테이블에서 동작하고, 
   having 절은 group by 절에서 생성된 중간 테이블에서 동작한다. 
   사실 수행된 과정은 동일하다. having 절을 포함시켰을 때 sql은 조건을 참조하여 행을 선택한다.



4. order by 절

 - 마지막으로 수행되는 절로 중간 결과 테이블의 내용에 영향을 주지 않는다.
   그러나 마지막까지 선택된 행을 정렬한다.
   따라서 stu_no 열에 있는 데이터는 order by 절에 의해서 정렬된다.



5. 스키마

 - 외부 스키마(External Schema) : 프로그래머나 사용자의 입장에서 데이터베이스의 모습으로 조직의 일부분을 정의한 것
 - 개념 스키마(Conceptual Schema) : 모든 응용 시스템과 사용자들이 필요로하는 데이터를 통합한 
			          조직 전체의 데이터베이스 구조를 논리적으로 정의한 것
 - 내부 스키마(Internal Schema) : 전체 데이터베이스의 물리적 저장 형태를 기술하는 것



6. 트랜잭션
 - 논리적인 일의 단위, 물리적으로 보이는 처리단위가 아니라 시스템상의 처리단위를 말한다.



7. CRUD
 - Create
 - Read
 - Update
 - Delete



8. LIKE로 %를 검색하기

   SELECT * FROM sample25;
   Text열이 %를 포함하는 행을 검색
   SELECT * FROM sample25 WHERE text LIKE '%\%%';

 - %를 LIKE로 검색할 경우에는 \%로 한다!
 - _를 LIKE로 검색할 경우에는 \_로 한다.



9. 프로시저 vs 함수

 - 함수(Function) : 클라이언트에서 처리, 리턴값 필수, 리턴값 하나만 반환가능

 - 프로시저(Procedure) : 서버로 보내서 처리, 리턴값 선택, 리턴값 여러개 반환가능

 - SQL 처리를 하는 위치에서의 차이점인데 속도면에서는 프로시저가 더 빠른 성능을 보인다고 한다.
   때문에 각각의 용도는 프로시저 같은 경우 실행, 처리를 할 때 주로 사용되고, 
   함수는 간단한 계산이나 수치 결과를 나타낼 때 주로 사용한다.

 - 프로시저 단점 :  처리성능과 재사용면에서 좋지 않다.

 - 프로시저 사용 하는 이유
    하나의 요청으로 여러 SQL문을 실행 가능
    네트워크 소요 시간을 줄일 수 있음(여러개의 쿼리를 처리하는 시점에서 네트워크 부하 줄임)
    보수성이 뛰어나다.
    개발 업무를 구분하여 개발할 수 있다. (DB관련 처리를 API처럼 만들어 제공)

 - ex)
  DELIMITER $$
  CREATE PROCEDURE 'TEST_PROC' (
      -- 파라미터 선언
      PARAM_NAME VARCHAR(20),
      PARAM_AGE INT
  )
  BEGIN
      -- 변수 선언
      DECLARE PARAM_NUM INTEGER;

      -- 쿼리문1
      SELECT COUNT(*) + 1
      	INTO PARAM_NUM
          FROM table1;

      -- 쿼리문2
      INSERT INTO table1(total_count, user_name, user_age) VALUES(PARAM_NUM, PARAM_NAME, PARAM_AGE);
  END $$
  DELIMITER ;

 * 첫번째와 마지막 라인에 DELIMITER라는 이상한 단어가 있는걸 확인할 수 있는데 
   프로시저 작성이 완료되지 않았음에도 SQL문이 실행되는 것을 막기 위해 사용된다. *

   (더 많은 내용 : https://spiderwebcoding.tistory.com/7 , https://blog.naver.com/PostView.naver?blogId=hj_kim97&logNo=222289448868)


10. 외래키 지정 방법

 - CONSTRAINT 제약조건 명 FOREIGN KEY(외래키) REFERENCES 부모테이블명(참조키);
 

11. 제약 조건 무시하고 테이블 삭제 및 변경

 - https://velog.io/@bigbrothershin/Mysql-foreign-key-%EB%AC%B4%EC%8B%9C%ED%95%98%EA%B3%A0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0

12. decimal('소수 부분을 포함한 실수의 총 자릿수','소수부분 자릿수')


13. distinct : 중복x

