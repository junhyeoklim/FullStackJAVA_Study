<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<context:component-scan base-package="com.springbook.biz"></context:component-scan>
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<context:property-placeholder location="classpath:config/database.properties"/>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Transaction 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="boardPointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="boardPointcut" />
	</aop:config>
	
</beans>

<!-- 
		BoardServiceImpl class
		
		public void insertBoard(BoardVO vo) {
			boardDAO.insertBoard(vo);
			int num = 0;
			if(num==0) throw new IllegalArgumentException("0번 글은 등록할 수 없습니다.");
			boardDAO.insertBoard(vo);
		}
		
		BoardServiceImpl 클래스의 insertBoard() 메소드에서 BoardDAOSpring의 insertBoard()
		메소드를 호출하고, 그 다음에 일부러 예외를 발생시키고, 다시 BoardDAOSpring의 insertBoard()를 호출했다.
		첫 번째 입력은 성공했지만, 두 번째 입력전에 예외가 발생한다. 하지만 트랜잭션은 메소드 단위로 관리되므로 발생한
		예외로 인해 BoardServiceImpl 클래스의 insertBoard() 메소드의 작업 결과는 모두 롤백(Rollback) 처리된다.
		
		BoardServiceClient의 main 메소드를 실행시켜서 결과를 본다.
		insertBoard에서 예외가 발생했기때문에 새로운 글이 등록이 안되는 것을 볼 수 있다.
	
		트랜잭션 설정이 어떤 순서로 동작하는지 알아보면
		1. 클라이언트가 BoardSercviceImpl 객체의 insertBoard() 메소드를 호출하면,
		2. insertBoard() 메소드의 비즈니스 로직이 수행된다. 만약 insertBoard() 메소드 수행 중에 문제가 발생하면
		3. txAdvice로 등록한 어드바이스가 동작하여, 참조하는 
		4. txManager의 rollback() 메소드를 호출한다. 만약 문제없이 정상으로 수행되었다면 commit() 메소드를 호출한다.
	
 -->