1. git-test에 로컬 저장소를 만든다.
2. 첫 번째 커밋(first commit)이라는 제목으로 문자 A가 저장된 a.txt라는 파일을 생성한 커밋을 만든다.
3. 두 번째 커밋(second commit)이라는 제목으로 a.txt에 문자 B를 추가한 후 커밋한다.
4. 세 번째 커밋(third commit)이라는 제목으로 a.txt에 문자 C를 추가한 후 커밋한다.
5. a.txt 파일에 마지막 줄에 문자 D를 추가한 뒤 저장합니다.
6. 최근 커밋에 비해 무엇이 달라졌는지 출력해 본다.
7. 앞서 생성한 변경 사항을 스테이지에 추가한다.
8. 스테이지에 추가된 항목과 최근 커밋의 차이가 출력해 본다.
9. 앞서 스테이지로 올린 a.txt 파일을 커밋한다. 커밋 메시지는 fourth commit으로 하자.
10. 세 번째 커밋을 기준으로 네 번째 커밋이 달라진 점을 출력해보자.
11. 네 번째 커밋을 기준으로 세 번째 커밋이 달라진 점을 출력해보자.

12. 세 번째 커밋으로 soft reset 해 보자.
13. 커밋 목록을 확인해 보자.
14. a.txt 파일을 열어서 확인해 보자.
15. 세 번째 커밋(현재 최근 커밋)과 스테이지의 차이를 확인해 보자.
16. 네 번째 커밋을 "fourth commit"이라는 제목으로 만들자.
17. 세 번째 커밋으로 mixed reset 하자.
18. 커밋 목록을 확인하자.
19. a.txt 파일을 열어보자.
20. git status 명령을 입력하여 작업 디렉터리를 확인해보자.
21. 확인을 마쳤다면 다시 네 번째 커밋을 "fourth commit"이라는 제목으로 만들자.
22. 세번째 커밋으로 하드리셋하자.
23. 커밋 목록을 확인하자.
24. a.txt 파일을 열어 확인해보자.

25. 커밋 목록을 조회하자.
26. 여기서 세 번째 커밋을 되돌린 새로운 커밋을 만들어 보자.(revert)
27. a.txt 파일을 열어보자.
28. 최신 커밋과 최신 커밋 이전 커밋을 비교해 보자.

* 새로운 저장소를 만들고 실습해 보자.
(예: c:\git-test2를 만들고 git init)
29. 문자 A가 저장된 a.txt 파일을 만들고 "first commit" 이라는 메시지(제목)로 커밋하자.
30. a.txt 파일에 문자 B를 추가해 a.txt 파일을 수정하자.
31. 이제 이 수정 내역, 즉 문자 B를 추가한 작업을 "add B"라는 메시지와 함께 임시 저장하자.
32. a.txt 파일을 열어 보자.
33. a.txt 파일에 문자 C를 추가하자.
34. 이번에는 "add C"라는 메시지와 함께 작업을 임시 저장하자.
35. a.txt 파일을 확인하자.
36. 임시저장된 작업을 조회해 보자.
37. 최근 임시저장된 것을 적용해 보자.
38. a.txt 파일을 확인하자.
39. 최근 임시저장된 것을 삭제하자.
40. 임시 저장된 작업을 전부 삭제하는 명령은?

* 새로운 저장소를 만들고 실습해 보자.
(예: c:\git-test3를 만들고 git init)
41. 문자 A가 적힌 a.txt 파일을 만들고 커밋하자. 커밋 메시지는 first commit으로 하자.
42.  b.txt 파일을 만들고 B를 적은 뒤 커밋하자. 커밋 메시지는 second commit으로 하자.
43. C가 적힌 c.txt 파일을 만들고 커밋하자. 커밋 메시지는 third commit으로 하자.
44. 현재 브랜치의 목록을 출력하자.

45. foo 브랜치를 만들자.
46. 브랜치의 목록을 출력하자.
47. foo 브랜치로 체크아웃하자.
48. 문자 D가 저장된 foo_d.txt 파일을 만들고 커밋하자. 커밋 메시지는 fourth commit으로 하자.
49. foo_e.txt 파일을 만들고 E를 적은 뒤 커밋하자. 커밋 메시지는 fifth commit으로 하자.
50. master 브랜치로 체크아웃하자.
51. 작업디렉토리의 내용을 보자.(윈도우 탐색기에서 확인해 보자.)
52. master 브랜치에 비해 foo 브랜치가 다른 점을 확인해 보자.
53. 브랜치를 만듦과 동시에 체크아웃하는 명령어는?
54.  foo 브랜치를 master 브랜치로 병합하자.
55. 작업디렉토리의 내용을 보자.(윈도우 탐색기에서 확인해 보자.)

56. master 브랜치에서 있는 a.txt 파일을 수정하자.  내용을 master로 수정하고 커밋해 보자. 커밋 메시지는 master commit으로 하자.
57. foo 브랜치로 체크아웃하자.
58. a.txt 파일의 내용을 foo로 수정한 뒤 커밋하자. 커밋 메시지는 foo commit으로 하자.
59. master 브랜치로 체크아웃하자.
60. foo 브랜치를 master 브랜치로 병합하자. 충돌이 발생했을 것이다. a.txt 파일을 열어 확인하자.
충돌한 내용을 master 브랜치의 내용으로 반영하자. 그리고 스테이지에 올리고, 커밋하자. 미리 입력된 커밋 메시지로 커밋하자.
61. foo 브랜치를 삭제하자.
62. 브랜치 목록을 확인하자.
63. bar 브랜치를 만들자.
64. bar 브랜치로 체크아웃하자.
65. 문자 A가 저장된 bar_a.txt 파일을 만들고 "bar first"라는 제목으로 커밋하자.
66. 문자 B가 저장된 bar_b.txt 파일을 만들고 "bar second"라는 제목으로 커밋하자.
67. 모든 커밋 목록을 조회하자.(다른 브랜치도 포함해서)
68. master 브랜치로 체크아웃하자.
69. 문자 D가 저장된 d.txt 파일을 만들고 제목을 "ninth commit"으로 커밋하자.
70. 문자 E가 저장된 e.txt 파일을 만들고 제목을 "tenth commit"으로 커밋하자.
71. 모든 커밋 목록을 조회하자.(다른 브랜치도 포함해서)
72. bar 브랜치를 master 브랜치로 재배치하자.
73. 모든 커밋 목록을 조회하자.(다른 브랜치도 포함해서)
74. 모든 커밋 목록을 조회하는데 커밋당 한 줄로 출력된 그래프 형태로 조회하자.