Mybatis는 원래 Apache에서 Ibatis라는 이름의 프레임워크로 탄생하였으나, 2010년에 Ibatis가 Apache에서 탈퇴하여 Google로 넘어가면서 이름이 Mybatis로 변경되었다. Mybatis는 Ibatis로부터 파생되어서 기본 개념과 문법은 Ibatis와 거의 유사하다.

1.1 Mybatis 프레임워크 특징
Mybatis 프레임워크의 가장 중요한 특징을 두 가지로 정리하자면 첫째는 한두 줄의 자바 코드로 DB 연동을 처리한다는 것이며, 둘째는 SQL 명령어를 자바 코드에서 분리하여 XML 파일에 따로 관리한다는 것이다.

다음은 BoardDAO 클래스에 글 목록 검색 기능을 JDBC 기반으로 구현한 것이다.

@Repository("boardDAO")
public class BoardDAO {

	public List<BoardVO> getBoardList(BoardVO vo){
		System.out.println("===> JDBC로 getBoardList() 기능 처리");
		List<BoardVO> boardList = new ArrayList<BoardVO>();
		String searchKeyword = vo.getSearchKeyword();
		
		String sqlT = "SELECT * FROM BOARD WHERE TITLE LIKE '%" + searchKeyword +"%' ORDER BY SEQ DESC";
		String sqlC = "SELECT * FROM BOARD WHERE CONTENT LIKE '%" + searchKeyword + "%' ORDER BY SEQ DESC";
		String sql = null;
		if(vo.getSearchCondition().equals("TITLE")) sql = sqlT;
		else if(vo.getSearchCondition().equals("CONTENT")) sql = sqlC;		
		System.out.println("sql" + sql);
		
		try(Connection conn = JDBCUtil.getConnection();
				PreparedStatement pstmt = conn.prepareStatement(sql);
				ResultSet rs = pstmt.executeQuery())
		{
			while(rs.next()) {
				BoardVO board = new BoardVO();
				board.setSeq(rs.getInt("SEQ"));
				board.setTitle(rs.getString("TITLE"));
				board.setWriter(rs.getString("WRITER"));
				board.setContent(rs.getString("CONTENT"));
				board.setRegDate(rs.getDate("REGDATE"));
				board.setCnt(rs.getInt("CNT"));
				boardList.add(board);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return boardList;
	}
}

위 코드는 JDBCUtil 클래스를 이용하여 DB 커넥션 획득과 해제 작업을 처리해서 그나마 코드가 간결해진 것이다. 만약 JDBCUtil 클래스가 없었다면 더 많은 자바 코드가 필요했을 것이다.
사실 유지보수 관점에서 보면 DB 연동에 사용된 복잡한 자바 코드는 더 이상 중요하지 않다. 개발자는 실행되는 SQL만 관리하면 되며, Mybatis는 개발자가 이 SQL 관리에만 집중할 수 있도록 도와준다. 다음은 위에서 작성한 글 목록 검색 기능을 Mybatis로 변경한 코드이다.

public class BoardDAO{
	public List<BoardVO> getBoardList(BoardVO vo){
		SqlSession mybatis = SqlSessionFactoryBean.getSqlSessionInstance();
		return mybatis.selectList("BoardDAO.getBoardList", vo);
	}
}

Mybatis는 XML 파일에 저장된 SQL 명령어를 대신 실행하고 실행 결과를 VO 같은 자바 객체에 자동으로 매핑까지 해준다. 그래서 Mybatis 프레임워크를 데이터 맵퍼(Data Mapper)라고 부른다. 결국 Mybatis 프레임워크를 이용하여 DB 연동을 처리하면 대부분 한두 줄의 자바 코드만으로도 원하는 DB 연동 로직을 처리할 수 있게 된다.
Mybatis의 두 번째 특징은 Java 코드에서 SQL 구문을 분리하는 것이다. 만약 SQL 명령어가 DAO 같은 자바 클래스에 저장되면 SQL 명령어만 수정하는 상황에서도 자바 클래스를 다시 컴파일해야 한다. 그리고 SQL 명령어들을 한 곳에 모아서 관리하기도 쉽지 않다.
결국, SQL 명령어에 대한 통합 관리를 위해서라도 자바 소스에서 SQL을 분리하는 것은 매우 중요하다. 다음은 게시글 목록을 검색할 때 사용할 SQL을 별도의 XML 파일에 작성한 것이다.

<mapper namespace="BoardDAO">
	<select id="getBoardList" resultType="board">
		select * from board
		WHERE TITLE LIKE CONCAT('%', ?, '%')
		ORDER BY SEQ DESC
	</select>
</mapper>

1.2 Java ORM Plugin 설치
스프링 관련 프로젝트를 개발할 때, STS(Spring Tool Suite) 플러그인 프로그램을 이용하면 스프링 환경설정 파일을 비롯하여 다양한 기능을 사용할 수 있었다. Mybatis 역시 Java ORM이라는 프러그인 프로그램이 있어서 이 플러그인을 이용하면 Mybatis와 관련된 복잡한 XML 설정 파일들을 자동으로 만들고 관리할 수 있다.

첨부된 이미지를 참고하여
Eclipse-EE-JAVA-ORM-수동-설치-MyBatis-.png
Java ORM Plugin 설치

1.3 프로젝트 생성

프로젝트 선택 - 마우스 오른쪽 클릭 - Properties
- Project Facets - <Convert to faceted form> 링크를 선택  Java 항목에서 버전 번호를 "11"로 변경
그리고 오른쪽에 [Runtimes] 탭에서 "jdk11"을 체크하고 <Apply>, <OK> 버튼을 차례로 클릭한다.

마지막으로 DB 연동을 위한 MySQL Driver와 Mybatis, IBatis 라이브러리들을 내려받고자 pom.xml 파일에 다음과 같이 <dependency> 엘리먼트를 추가한다.

  <dependencies>
  
		<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		    <version>8.0.33</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.5.13</version>
		</dependency>
	
  </dependencies>


1.4 VO(Value Object) 클래스 작성

XML 파일에 저장된 SQL 명령어에 사용자가 입력한 값들을 전달하고 실행 결과를 매핑할 VO 클래스를 작성한다.

package com.springbook.biz.board;

import java.util.Date;

// VO(Value Object)
public class BoardVO {
	private int seq;
	private String title;
	private String writer;
	private String content;
	private Date regDate;
	private int cnt;
	private String searchCondition;
	private String searchKeyword;
	
	public int getSeq() {
		return seq;
	}
	public void setSeq(int seq) {
		this.seq = seq;
	}
	public String getTitle() {
		return title;
	}
	public void setTitle(String title) {
		this.title = title;
	}
	public String getWriter() {
		return writer;
	}
	public void setWriter(String writer) {
		this.writer = writer;
	}
	public String getContent() {
		return content;
	}
	public void setContent(String content) {
		this.content = content;
	}
	public Date getRegDate() {
		return regDate;
	}
	public void setRegDate(Date regDate) {
		this.regDate = regDate;
	}
	public int getCnt() {
		return cnt;
	}
	public void setCnt(int cnt) {
		this.cnt = cnt;
	}

	public String getSearchCondition() {
		return searchCondition;
	}
	public void setSearchCondition(String searchCondition) {
		this.searchCondition = searchCondition;
	}
	public String getSearchKeyword() {
		return searchKeyword;
	}
	public void setSearchKeyword(String searchKeyword) {
		this.searchKeyword = searchKeyword;
	}

	@Override
	public String toString() {
		return "BoardVO [seq=" + seq + ", title=" + title + ", writer=" + writer + ", content=" + content + 
				", regDate=" + regDate + ", cnt=" + cnt + "]";
	}
}

1.5 SQL Mapper XML 파일 작성
SQL Mapper XML 파일은 Mybatis에서 가장 중요한 파일이다. 이 XML 파일에 DB 연동에 필요한 SQL 명령어들이 저장되기 때문이다. 이 XML 파일은 Java ORM 플러그인을 이용하여 간단하게 생성할 수 있다.
MybatisProject에 마우스 오른쪽 버튼을 클릭하고 메뉴에서 [New]-[Other]를 선택한다.

'Java ORM Plugin'폴더를 확장하고 'Mybatis Mapper XML'을 선택한 후, <Next> 버튼을 클릭한다.

Container에 Browse... 로 /MybatisProject 선택
MyBatis Mapper name: board-mapping.xml 
Finish

src/main/resources 소스 폴더에 'mappings'라는 패키지를 생성하고 board-mapping.xml 파일을 이동시킨다.

그리고 board-mapping.xml 파일의 내용을 다음과 같이 수정한다.

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="BoardDAO">

	<insert id="insertBoard">
		INSERT INTO BOARD(TITLE, WRITER, CONTENT)
		VALUES(#{title}, #{writer}, #{content})
	</insert>
	
	<update id="updateBoard">
		UPDATE BOARD SET TITLE=#{title}, CONTENT=#{content} WHERE SEQ=#{seq}
	</update>
	
	<delete id="deleteBoard">
		DELETE BOARD WHERE SEQ=#{seq}
	</delete>
	
	<select id="getBoard">
		SELECT * FROM BOARD WHERE SEQ=#{seq}
	</select>

	<select id="getBoardList" resultType="board">
		SELECT * FROM BOARD
		WHERE TITLE LIKE '%' || #{searchKeyword} || '%'
		ORDER BY SEQ DESC
	</select>

</mapper>

SQL Mapper 파일은 <mapper>를 루트 엘리먼트로 사용한다. 그리고 <insert>, <update>, <delete>, <select> 엘리먼트를 이용하여 필요한 SQL 구문들을 등록한다. 기존에 BoardDAO 클래스에서 사용했던 SQL 구문을 그대로 등록하여 재사용하면 되므로 기본 설정 자체는 그리 복잡하지 않다.

Mybatis 환경설정 파일
Mybatis 환경설정 파일도 앞에서 설치한 Java ORM 플러그인을 사용하면 자동으로 생성할 수 있다. MybatisProject를 선택하고 마우스 오른쪽 버튼을 클릭한 후, [New]->[Other] 메뉴를 선택한다.
'Mybatis Configuration name'에 생성할 파일 이름을 입력하고 <Finish> 버튼을 클릭한다. Mybatis 메인 설정 파일 이름은 일반적으로 "sql-map-config.xml"을 사용한다.

src 폴더에 db.properties 파일과 sql-map-config.xml 파일이 생성된다.
이 파일들의 위치를 src/main/resource 소스 폴더로 이동한다.

파일들을 이동했으면, 먼저 데이터베이스 커넥션 관련 프로퍼티 정보가 등록되어 있는 db.properties 파일을 수정한다.

jdbc.driverClassName=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/springdb
jdbc.username=root
jdbc.password=1234

그리고 Mybatis 메인 환경설정 파일인 sql-map-config.xml 역시 기본적인 내용이 설정되어 잇는데, 이 역시 정확한설정을 제공하는 것이 아닌, 전체 설정의 기본 틀만 제공한다. 따라서 다음과 같이 관련 정보를 정확하게 반영하여 수정해야 한다.

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<properties resource="db.properties" />
	<typeAliases>
		<typeAlias type="com.springbook.biz.board.BoardVO" alias="board"></typeAlias>
	</typeAliases>
	<environments default="development">
		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driverClassName}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
	</environments>
	<mappers>
		<mapper resource="mappings/board-mapping.xml" />
	</mappers>
</configuration>

<properties> 엘리먼트는 XML 설정에서 사용할 프로퍼티를 선언하거나 외부 프로퍼티 파일을 참조할 때 사용한다. 이렇게 선언된 프로퍼티는 "${프로퍼티 이름}"으로 참조하여 사용할 수 있다.
<typeAliases> 엘리먼트는 <typeAlias>를 여러 개 가질 수 있으며, <typeAlias> 엘리먼트를 이용하여 특정 클래스의 별치(Alias)을 선언할 수 있다. 이 Alias는 SQL 명령어들이 저장되는 SqlMapper에서 사용할 수 있으며, 이를 통해서 Sql Mapping 파일의 크기를 줄여주기도 하고 설정을 간단히 처리할 수도 있다. 현재는 BoardVO 클래스에 대한 Alias만 board로 설정한 상태이다.
Mybatis는 특정 DBMS로부터 커넥션을 획득하고 DB 연동을 처리하기 위해서 반드시 DataSource 정보가 필요하다. <environments> 엘리먼트에는 다양한 설정을 추가할 수 있지만, 현재는 가장 중요한 DataSource 설정만 작성하였다.
마지막으로 <mappers> 엘리먼트는 여러 <mapper>를 가질 수 있으며, 이 <mapper>를 이용하여 SQL 명령어들이 저장된 SQL 파일들을 등록할 수 있다.

SqlSession 객체 생성하기
지금까지 복잡한 Mybatis 관련 설정 파일들을 작성했는데 사실 Mybatis를 처음 접하는 개발자에게는 이런 설정이 잘 이해도 안되고 특별한 장점을 느끼지도 못할 것이다. 이것은 아직 SQL을 외부의 XML 파일에 따로 저장하는 것 정도만 처리했기 때문이다. 이제는 이 Mybatis 관련 설정을 기반으로 DAO 클래스를 구현해보도록 하자. 그러면 Mybatis의 장점을 더욱 확실히 느낄 수 있을 것이다.
Mybatis를 이용하여 DAO를 구현하려면 SqlSession 객체가 필요하다. 그런데 이 SqlSession 객체를 얻으려면 SqlSessionFactory 객체가 필요하다. 따라서 DAO 클래스를 구현하기에 앞서 SqlSessionFactory 객체를 생성하는 유틸리티 클래스를 작성해야 한다.


package com.springbook.biz.util;

import java.io.Reader;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

public class SqlSessionFactoryBean {
	private static SqlSessionFactory sessionFactory = null;
	static {
		try{
			if(sessionFactory == null){
				Reader reader = Resources.getResourceAsReader("sql-map-config.xml");
				sessionFactory = new SqlSessionFactoryBuilder().build(reader);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
			
	}
	
	public static SqlSession getSqlSessionInstance() {
		return sessionFactory.openSession();
	}
}

위 소스에서 가장 중요한 핵심 코드는 두 줄이다. 우선 Mybatis 메인 설정 파일인 sql-map-config.xml 파일로부터 설정 정보를 읽어 들이기 위한 입력 스트림을 생성해야 한다. 그리고나서 입력 스트림을 통해 sql-map-config.xml 파일을 읽어 SqlSessionFactory 객체를 생성한다.

Reader reader = Resources.getResourceAsReader("sql-map-config.xml");
sessionFactory = new SqlSessionFactoryBuilder().build(reader);

getSqlSessionInstance() 메소드는 SqlSessionFactory 객체로부터 SqlSession 객체를 얻어내어 리턴하는 메소드가. 이제 이 메소드를 이용하여 SqlSession 객체가 필요한 DAO 클래스를 구현하면 된다.

1.8 DAO 클래스 작성
다음은 Mybatis를 이용하여 데이터베이스 연동을 처리하는 BoardDAO 클래스다.

package com.springbook.biz.board.impl;

import java.util.List;

import org.apache.ibatis.session.SqlSession;

import com.springbook.biz.board.BoardVO;
import com.springbook.biz.util.SqlSessionFactoryBean;

public class BoardDAO {
	private SqlSession mybatis;
	
	public BoardDAO() {
		mybatis = SqlSessionFactoryBean.getSqlSessionInstance();
	}
	
	public void insertBoard(BoardVO vo) {
		mybatis.insert("BoardDAO.insertBoard", vo);
		mybatis.commit();
	}
	
	public void updateBoard(BoardVO vo) {
		mybatis.insert("BoardDAO.updateBoard", vo);
		mybatis.commit();
	}
	
	public void deleteBoard(BoardVO vo) {
		mybatis.delete("BoardDAO.deleteBoard", vo);
		mybatis.commit();
	}
	
	public BoardVO getBoard(BoardVO vo) {
		return (BoardVO) mybatis.selectOne("BoardDAO.getBoard", vo);
	}
	
	public List<BoardVO> getBoardList(BoardVO vo){
		return mybatis.selectList("BoardDAO.getBoardList", vo);
	}
}

BoardDAO 클래스는 생성자에서 SqlSessionFactoryBean을 이용하여 SqlSession 객체를 얻어내고 있다. 그리고 이 SqlSession 객체의 메소드를 이용하여 CRUD 기능의 메소드를 모두 구현하고 있다.
구현된 각 메소드를 보면 두 개의 정보가 인자로 전달되고 있는데, 첫 번째 인자는 실행될 SQL의 id 정보이다. 이때 SQL Mapper에 선언된 네임스페이스와 아이디를 조합하여 아이디를 지정해야 한다. 그리고 두 번째 인자는 parameterType 속성으로 지정된 파라미터 객체이다. 등록, 수정, 삭제는 각각 insert(), update(), delete() 메소드로 처리하며, 단 건 조회, 목록 조회는 selectOne(), selectList() 메소드로 처리한다.

1.9 테스트 클라이언트 작성 및 실행

BoardServiceClient.java

package com.springbook.biz.board;

import java.util.List;

import com.springbook.biz.board.impl.BoardDAO;

public class BoardServiceClient {

	public static void main(String[] args) {
		BoardDAO boardDAO = new BoardDAO();
		
		BoardVO vo = new BoardVO();
		vo.setTitle("myBatis 제목");
		vo.setWriter("홍길동");
		vo.setContent("myBatis 내용입니다....");
		boardDAO.insertBoard(vo);
		
		vo.setSearchCondition("TITLE");
		vo.setSearchKeyword("");
		List<BoardVO> boardList = boardDAO.getBoardList(vo);
		for(BoardVO board : boardList) {
			System.out.println("----> " + board.toString());
		}
	}
}

