1) final 변수 : 상수 만들때 씀
     - 상수 변수는 웬만해선 대문자로 쓸것

2) 삼항 연산자 복습
    - 형태 : condition ? exprIfTrue : exprIfFalse;
    - condition : 조건문으로 사용되는 표현식
    - exprIfTrue : condition이 truthy한 값으로 평가될 경우 실행되는 표현식 
	         (true와 같거나, true로 치환될 수 있는 값)
    - exprIfFalse : condition이 falsy한 값으로 평가될 경우 실행되는 표현식 
	          (false와 같거나, false로 치환될 수 있는 값)

3) 증감 연산자 복습
 ++num vs num++ : 단독으로 쓰일때는 서로 차이가 없지만 다른 변수(혹은 출력 할 경우)에 대입할때 쓰일 경우
		  전자는 증가 시킨 값을 대입 하고 후자는 증가 되기 전 값을 대입 한다
		   (대입 하는 변수 값만 차이 있지 num 자체는 서로 같다)

4) for 반복문 복습
    - for(...;...;...);
       {
	... 	-> for뒤에 붙은';'은 빈 명령문을 뜻하여 빈 명령문을 for에 조건이 끝날때까지 반복 후 빠져나와
       }		    for문 뒤에 있는 명령어들을 실행한다. (while문 같은 경우 무한루프에 빠진다)

5) 추상 클래스 vs 인터페이스 

* 추상 메소드란? : 선언은 되어 있으나 코드가 구현되어 있지 않는 메소드
		abstract키워드를 선언하는 선언부만이 존재하고, 구현부는 작성하지 않고 사용한다.

 - 추상 클래스는 클래스 내 '추상 메소드' 가 하나 이상 포함되거나 abstract로 정의된 경우를 말한다.
   반면 인터페이스는 모든 메소드가 추상 메소드인 경우이다.

 - 추상 클래스와 인터페이스는 상속받는 클래스 혹은 구현하는 인터페이스 안에 있는
   추상 메소드를 구현하도록 강제한다.

 - 추상 클래스는 그 추상 클래스를 상속받아서 기능을 이용하고, 확장시키는 반면에
   인터페이스는 함수의 껍데기만 있는데, 그 이유가 함수의 구현을 강제하기 위해서이다.
   (구현한 객체들에 대해서 동일한 동작을 약속하기 위해 존재한다.)

6) 오버로딩 vs 오버라이딩

 - 오버로딩 : 자바의 한 클래스 내에 이미 사용하려는 이름과 같은 이름을 가진 메소드가 있더라도 
  	    매개변수의 개수 또는 타입이 다르면, 같은 이름을 사용해서 메소드를 정의할 수 있다.

 - 오버로딩 조건 : 메소드의 이름이 같고, 매개변수의 개수나 타입이 달라야 한다. 
	           주의할 점은 '리턴 값만' 다른 것은 오버로딩을 할 수 없다는 것이다.

 - 오버로딩 적용 범위 : 같은 클래스 내에서 적용된다.

 - 오버라이딩 : 부모 클래스로부터 상속받은 메소드를 자식 클래스에서 재정의하는 것을 오버라이딩이라고 한다. 
	       상속받은 메소드를 그대로 사용할 수도 있지만, 
	       자식 클래스에서 상황에 맞게 변경해야하는 경우 오버라이딩할 필요가 생긴다.

 - 오버라이딩 조건 : 부모 클래스의 메소드를 재정의하는 것이므로,
	             자식 클래스에서는 오버라이딩하고자 하는 메소드의 이름, 매개변수, 리턴 값이
		 모두 같아야 한다.

 - 오버라이딩 적용 범위 : 상속관계에서 적용된다.

7) 논리 연산자 

 - 병렬 구조이면 or, 직렬 구조이면 and