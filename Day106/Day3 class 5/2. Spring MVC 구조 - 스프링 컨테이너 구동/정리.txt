스프링 컨테이너 구동
클라이언트의 요청으로 DispatcherServlet 객체가 생성되고 나면 DispatcherServlet 클래스에 재정의된 init() 메소드가 자동으로 실행되어 XmlWebApplicationContext라는 스프링 컨테이너가 구동된다. XmlWebApplicationContext는 ApplicationContext를 구현한 클래스 중 하나이다. 하지만 XmlWebApplicationContext는 우리가 직접 생성하는 것이 아니라 DispatcherServlet이 생성한다.
Spring MVC의 구성 요소 중에서 DispatcherServlet 클래스가 유일한 서블릿이다. 따라서 서블릿 컨테이너는 web.xml 파일에 등록된 DispatcherServlet만 생성해준다. 하지만 DispatcherServlet 객체 혼자서는 클라이언트의 요청을 처리할 수 없고, 반드시 HandlerMapping, Controller, ViewResolver 객체들과 상호작용해야 한다. 이 객체들을 메모리에 생성하기 위해서 DispatcherServlet은 스프링 컨테이너를 구동하는 것이다.
 우리가 직접 DispatcherServlet 클래스를 개발했을 때는 init() 메소드에서 DispatcherServlet이 사용하는 HandlerMapping, Controller, ViewResolver 객체들을 생성했다. 다만, 스프링에서 제공하는 DispatcherServlet은 스프링 컨테이너를 통해 이 객체들을 생성하는 것이 다를 뿐이다.

public class DispatcherServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private HandlerMapping handlerMapping;
	private ViewResolver viewResolver;
	
	
       
    @Override
	public void init() throws ServletException {
		handlerMapping = new HandlerMapping();
		viewResolver = new ViewResolver();
		viewResolver.setPrefix("./");
		viewResolver.setSuffix(".jsp");
	}
	...
}

결국 DispatcherServlet은 클라이언트의 요청 처리에 필요한 HandlerMapping, Controller, ViewResolver 객체들을 생성하기 위해 스프링 컨테이너를 구동한다.

p 323 참고

서블릿 컨테이너가 DispatcherServlet 객체를 생성하고 나면 재정의된 init() 메소드가 자동으로 실행된다. 그러면 init() 메소드는 스프링 설정 파일(actioon-servlet.xml)을 로딩하여 XmlWebApplicationContext를 생성한다. 즉, 스프링 컨테이너가 구동되는 것이다. 결국 스프링 설정 파일(action-servlet.xml)에 DispatcherServlet이 사용할 HandlerMapping, Controller, ViewResolver 클래스를 <bean> 등록하면 스프링 컨테이너가 해당 객체들을 생성해준다.