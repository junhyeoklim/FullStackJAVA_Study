어노테이션 기반의 예외 처리
스프링에서는 @ControllerAdvice와 @ExceptionHandler 어노테이션을 이용하여 컨트롤의 메소드 수행 중 발생하는 예외를 일괄적으로 처리할 수 있다.

presentation-layer.xml

<mvc:annotation-driven></mvc:annotation-driven>

스프링 설정 파일에 mvc 네임스페이스를 추가하고 <mvc:annotation-driven> 엘리먼트를 설정해야 한다. 그래야 다음에 작성할 예외 처리 클래스에서 예외 처리 메소드 위에 @ExceptionHandler 어노테이션을 사용할 수 있다. 만약 <mvc:annotation-driven>을 설정하지 않으면 @ExceptionHandler 어노테이션은 인식하지 못한다.

이제 발생하는 예외의 종류에 따라서 적절한 예외 화면이 서비스되도록 예외 처리 클래스를 작성한다.

package com.springbook.view.common;

import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.ModelAndView;

@ControllerAdvice("com.springbook.view")
public class CommonExcetionHandler {
	
	@ExceptionHandler(ArithmeticException.class)
	public ModelAndView handleArithmeticException(Exception e) {
		ModelAndView mav = new ModelAndView();
		mav.addObject("exception", e);
		mav.setViewName("/common/arithmeticError.jsp");
		return mav;
	}

	@ExceptionHandler(NullPointerException.class)
	public ModelAndView handleNullPointerException(Exception e) {
		ModelAndView mav = new ModelAndView();
		mav.addObject("exception", e);
		mav.setViewName("/common/nullPointerError.jsp");
		return mav;
	}	

	@ExceptionHandler(Exception.class)
	public ModelAndView handleException(Exception e) {
		ModelAndView mav = new ModelAndView();
		mav.addObject("exception", e);
		mav.setViewName("/common/error.jsp");
		return mav;
	}	
}

먼저 클래스 위에 선언된 @ControllerAdvice("com.springbook.view") 어노테이션에 의해 CommonExceptionHandler 객체는 자동으로 생성된다. 그리고 "com.springbook.view" 패키지로 시작하는 컨트롤러에서 예외가 발생하는 순간 @ExceptionHandler 어노테이션으로 지정한 메소드가 실행된다. 이때, 어떤 예외가 발생했느냐에 따라 다른 메소드가 수행된다.
만약 ArithmeticException이 발생하면 handleArithmeticException() 메소드가 실행되고, NullPointerException이 발생하면 handleNullPointerException() 메소드가, 그리고 전혀 다른 예외가 발생하면 handleException() 메소드가 기본으로 실행된다.

이제 마지막으로 사용자에게 전송할 예외 관련 화면만 만들면 된다.

webapp의 하위에 common 폴더를 만들고, 다음 3개의 파일을 만들자
arithmeticError.jsp, error.jsp, nullPointerError.jsp

arithmeticError.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>기본 에러 화면</title>
</head>
<body>
	<!-- 타이틀 시작 -->
	<table border="1">
		<tr><td><b>ArithmeticError 에러 화면입니다.</b></td></tr>
	</table>
	
	<!-- 에러 메시지 -->
	<table border="1">
		<tr>
			<td>Message : ${exception.message}</td>
		</tr>
	</table>
</body>
</html>

error.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>기본 에러 화면</title>
</head>
<body>
	<!-- 타이틀 시작 -->
	<table border="1">
		<tr><td><b>기본 에러 화면입니다.</b></td></tr>
	</table>
	
	<!-- 에러 메시지 -->
	<table border="1">
		<tr>
			<td>Message : ${exception.message}</td>
		</tr>
	</table>
</body>
</html>

nullPointerError.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>기본 에러 화면</title>
</head>
<body>
	<!-- 타이틀 시작 -->
	<table border="1">
		<tr><td><b>NullPointerError 에러 화면입니다.</b></td></tr>
	</table>
	
	<!-- 에러 메시지 -->
	<table border="1">
		<tr>
			<td>Message : ${exception.message}</td>
		</tr>
	</table>
</body>
</html>