6장 명령어로 버전 관리하기 1

* git init : 로컬 저장소 만들기
* git status : 작업 디렉터리 상태 확인하기
* git add : 스테이지에 올리기
* git commit : 커밋하기
* git log : 커밋 조회하기
* git tag : 태그 추가/조회/삭제하기

6.2 버전 만들기

1. git init : 로컬 저장소 만들기

1. 저장소를 만드려는 경로에서 깃 배시를 열어주세요. C:\test 경로에서 깃 저장소를 만들어 보겠습니다. 다시 말해, 작업 디렉터리를 C:\test로 삼겠습니다. 해당 경로에서 마우스 오른쪽 버튼을 클릭한 후 Git Bash Here를 클릭하여 깃 배시를 열어보세요.

////////////////////////////////////////////////////////////
시작 메뉴에서 깃 배시 열기
시작 검색에서 git bash 입력
이 경우 cd <경로> 명령으로 원하는 경로로 이동할 수 있습니다. cd <경로>는 '해당 경로로 이동하라'는 명령입니다. 가령 C:\test로 이동하고 싶다면 cd C:\test를 입력하면 됩니다.
참고로 현재 경로를 확인하는 명령어는 pwd입니다. 현재 필자는 C:\test로 이동했으니 pwd 명령어를 입력하면 해당 경로가 출력됩니다.
////////////////////////////////////////////////////////////////////////////

2. 이제 git init을 입력해 보세요. Initialized empty Git repository in <경로> 메시지가 뜨면 성공입니다. 저장소가 만들어지면 해당 경로에 .git 폴더가 만들어진 것을 볼 수 있습니다.


2. git status : 작업 디렉터리 상태 확인하기

1. 저장소를 만들었다면 이제 버전을 관리할 대상을 만들어 볼까요? A가 적힌 a.txt 파일을 만듭니다.
2. git status는 현재 작업 디렉터리의 상태를 알려주는 명령입니다. 깃 배시에서 git status를 입력해봅니다.
On branch master는 현재 기본 브랜치, 즉 master 브랜치에 있다는 의미입니다. 그리고 No commits yet은 현재 아무런 커밋도 하지 않았음을 의미합니다. 마지막으로 Untracked files:는 깃이 기존에 변경 사항을 추적하지 않은 대상을 나타냅니다. 여기에 a.txt가 표시됐죠? 이는 기존에 버전을 관리한 적 없던 a.txt 라는 새로운 파일이 생성되었음을 의미합니다.

3. git add : 스테이지에 올리기

git add <스테이지에 추가할 대상> 명령으로 스테이지에 추가할 수 있습니다.
1. git add a.txt 명령을 입력하여 a.txt 파일을 스테이지에 추가하겠습니다.
2. 이제 git status 명령으로 작업 디렉터리의 상태를 확인해 봅시다. Changes to be committed: 항목에 a.txt 파일이 표기됐다면 성공적으로 스테이지에 추가된 것입니다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
한꺼번에 스테이지에 추가하기

변경 사항을 스테이지에 추가하는 명령은 git add <스테이지로 올릴 대상> 이라고 했습니다. 하지만 스테이지에 추가할 파일이 100개, 200개 있다면 어떡할까요? 100번, 200번 git add 명령을 사용해야 할까요?
git add . 명령으로 현재 디렉터리(작업 디렉터리)에 있는 모든 변경 사항을 한 번에 스테이지로 추가할 수 있습니다. 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

4. git commit : 커밋하기

스테이지로 변경 사항을 추가했다면 이제 커밋할 일만 남았다. 앞서 스테이지에 올린 a.txt 파일을 커밋해 보겠다. 커밋해서 새로운 버전을 만드는 명령은 git commit -m "커밋 메시지" 또는 git commit --message "커밋 메시지"입니다.

1. first commit 이라는 커밋 메시지로 새로운 버전을 만드는 명령은 git commit -m "first commit" 입니다.
2. 버전이 잘 만들어졌는지 확인해 볼까요? 저장소의 커밋 목록을 출력하는 명령은 git log입니다. git log를 입력하면 커밋 해시, 만든 사람, 커밋이 만들어진 날짜, 커밋 메시지가 출력됩니다. 커밋 해시 우측의 HEAD -> master는 현재 HEAD가 master 브랜치에 있음을 나타냅니다.
앞서 버전으로 만들 파일을 스테이지로 올리는 명령은 git add, 이를 버전으로 만드는 명령은 git commit -m "커밋 메시지"라고 했습니다. 이 두 명령을 합쳐 git commit -am "커밋 메시지" 명령으로 한 번에 사용할 수도 있습니다. 다시 말해, git commit -am "커밋 메시지" 명령으로 스테이지에 추가(add)와 커밋(commit)을 동시에 할 수 있습니다.

/////////////////////////////////////////////////////////////////////////////
TIP
git commit -am "커밋 메시지" 명령은 git commit -a -m "커밋 메시지", git commit --all --message "커밋 메시지" 명령과 같습니다.
/////////////////////////////////////////////////////////////////////////////

3. a.txt 파일에 B를 추가로 적어보세요.
4. git status 명령으로 작업 디렉터리의 상태를 확인해 보겠습니다. modified :  항목에 a.txt가 나타납니다. 이는 a.txt 파일이 수정되었음을 의미합니다.
5. 이 파일의 변경 사항을 새 버전으로 만들려면 이를 스테이지에 추가하고, 커밋해야겠죠? git commit -am "커밋 메시지" 명령으로 둘을 동시에 수행해 보겠습니다.
git commit -am "second commit"
6. git log로 커밋 목록을 확인해 보세요.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
스테이지 추가와 커밋을 동시에 하기 위한 조건

git commit -am "커밋 메시지" 명령은 깃이 변경 사항을 추적하는(tracked) 파일에만 사용 가능하다. 다시 말해, 스테이지에 이미 올라와 있거나 한번이라도 커밋한 적이 있는 파일에만 사용할 수 있다. 깃이 기존에 변경 사항을 추적하지 않은(untracked) 파일은 이 명령어를 사용할 수 없다.
예를 들어 보겠다. 새로운 파일 b.txt를 만들어 보겠다.
git status 명령으로 현재 상태를 확인하면 Untracked files: 항목에 b.txt 가 보일 것이다. 즉, 이 b.txt 파일은 기존에 깃이 변경 사항을 추적하지 않은 새로운 파일이라는 의미이다.
여기서 git commit -am "커밋 메시지 명령으로 add와 commit을 동시에 하려고 해도 커밋되지 않는다. b.txt 파일은 깃이 변경 사항을 추적하지 않았던(untracked) 파일이기 때문이다.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

앞서 커밋 메시지는 제목과 본문으로 구성된다고 한 것을 기억하나요? 또한 때로는 커밋 메시지를 아주 길고 자세히 남기는 경우도 있다고 했습니다.

git commit -m "커밋 메시지" 명령과 git commit -am "커밋 메시지" 명령 속 커밋 메시지는 커밋 메시지의 제목을 나타낸다. 즉, 이 두 명령은 커밋 메시지의 본문은 생략하고 간단하게 제목만 적을 때 사용하는 명령이다.
이 명령어로 커밋해도 무방하지만, 때로는 커밋 메시지의 제목뿐 아니라 본문까지 자세하게 작성해야 할 수도 있습니다. 그런 경우에는 git commit 명령을 사용하면 됩니다. 

1. a.txt 파일에 C를 추가한 뒤 저장하겠습니다.
2. git add 명령을 입력해 a.txt 파일을 스테이지로 추가합니다.
git add a.txt
3. 여기서 git commit을 입력해 보세요. 다음과 같이 커밋 메시지를 입력할 수 있는 Vim 창이 나옵니다. 이제 제목과 본문을 포함한 자세한 커밋 메시지를 작성하면 되는데, 아직은 입력할 수 없습니다. 무언가를 입력하기 위해서는 입력 모드로 전환해야 합니다. a 또는 i를 입력하세요.
4. 하단에 INSERT가 나온다면 입력 모드로 전환된 것입니다. 이제 커밋 메시지를 입력할 수 있습니다. 이렇듯 vi 또는 Vim 편집기는 창이 열린 직후 a나 i를 입력하여 입력 모드로 전환해야만 무언가를 입력할 수 있습니다.
5. 커밋 메시지 제목은 첫 번째 줄에 적을 수 있습니다.
6. 커밋 메시지의 본문은 제목에서 한 줄 띄고, 세 번째 줄부터 작성할 수 있습니다. 본문은 This is my third commit으로 하겠습니다.
7. 자, 커밋 메시지의 작성이 끝났습니다. 이제 이 커밋 메시지를 저장하면 커밋됩니다. 입력한 내용을 저장하려면 입력 모드에서 명령 모드로 전환해야 합니다. Esc 키를 눌러주세요. 하단의 INSERT 가 사라지지요?
8. 여기서 :write 또는 :w를 입력한 뒤 Enter를 누르면 입력한 내용이 저장됩니다. 그리고 :quit 또는 :q 입력 후 Enter를 누르면 입력 창이 닫힙니다.
또는 :wq를 입력하고 Enter를 눌러도 무방합니다. :wq는 :w와 :q를 동시에 입력하는 것과 같습니다. 여기에서는 입력한 커밋 메시지를 저장하고 창을 닫기 위해 :wq를 입력한 뒤 Enter를 누르겠습니다.
9. 그러면 새로운 커밋이 생성된 것을 확인할 수 있습니다.
10. git log 명령으로 세 번째 커밋을 확인해 보세요.

5. git log : 커밋 조회하기

① 커밋 목록을 단순한 형태로 보고 싶다면 git log --oneline 명령을 입력하면 된다. --oneline은 말 그대로 커밋 목록을 커밋당 한 줄로 출력해주는 옵션이다. 커밋이 매우 복잡하고 많이 쌓여 있는 상황에서 요긴하게 사용된다. 이 명령은 짧은 커밋 해시와 커밋 메시지 제목만을 출력한다.

git log --oneline

② 또 다른 유용한 옵션으로 --patch가 있다. 이는 해당 커밋으로 어떤 파일이 어떻게 수정됐는지를 출력한다. git log --patch 또는 git log -p를 입력해 보세요. 각각의 커밋이 무엇을 어떻게 변경했는지 상세하게 나온다.

git log -p

③ 또 다른 유용한 옵션으로 --graph도 살펴봅시다. 이는 각 커밋을 그래프의 형태로 출력하는방법입니다. git log --graph를 입력해 보세요. git log --graph를 입력해 보세요. 출력 결과 왼쪽에 빨간색 그래프가 보이나요?

git log --graph

브랜치가 여러 개로 나뉘어지고 합쳐지는 환경에서 --graph 옵션을 이용하면 브랜치별 커밋의 가독성을 높일 수 있습니다.

마지막으로 알아볼 유용한 옵션은 --branches입니다. 이는 모든 브랜치의 커밋 목록을 조회할 수 있는 옵션입니다. git log 명령은 기본적으로 현재 브랜치를 기준으로 커밋 목록을 조회합니다. 가령 다음과 같이 커밋이 쌓여 잇는 상황을 생각해 볼까요?
master 브랜치에는 커밋이 세 개 쌓여 있고, foo 브랜치에는 커밋이 총 다섯 개 쌓여 있습니다. 그래서 master 브랜치로 체크아웃한 상황에서 git log 명령을 입력하면 커밋 세 개만 조회됩니다. 현재 master 브랜치에는 커밋 세 개가 쌓여 있기 때문이지요. 달리 말해, master 브랜치에서는 자신의 브랜치에 속하지 않은 커밋(fourth commit이나 fifth commit)을 볼 수 없습니다.
반면 foo 브랜치에서는 커밋이 다섯 개 쌓여 있으니 foo 브랜치로 체크아웃한 뒤 git log 명령을 입력하면 커밋 다섯 개가 출력됩니다.

이때 --branches 옵션을 붙여 git log 명령을 입력하면 모든 브랜치의 커밋 목록이 출력되기 때문에 어떤 브랜치에서 커밋 목록을 조회하든 동일한 결과를 볼 수 있습니다. 가령 master 브랜치에서 git log --branches 명령을 입력하면 이전에는 볼 수 없었던 foo 브랜치의 커밋들까지 조회할 수 있습니다.

git log --branches

6.3 태그 관리하기

1. git tag <태그> : 태그 추가하기

커밋이 세 개 쌓여 있다고 가정해 보겠습니다. 여기서 최근 커밋, 즉 세 번째 커밋에 v1.0.0이라는 태그를 붙이려면 어떻게 해야 할까요?
간단합니다. git tag <태그> 명령을 이요하면 됩니다. git tag <태그>는 HEAD(현재 브랜치의 최신 커밋)가 가리키는 커밋에 태그를 붙이는 명령입니다.
① git tag v1.0.0을 입력해 보세요. 최근 커밋인 third commit에 v1.0.0 태그가 붙습니다.

git tag v1.0.0

② 커밋 목록을 조회하면 세 번째 커밋에 v1.0.0 태그가 붙은 것을 볼 수 있습니다.

git log

HEAD가 가리키는 커밋이 아닌 특정 커밋에 태그를 붙이려면 git tag <태그> <커밋> 형식으로 명령을 입력해야 합니다. 가령 두 번째 커밋에 v0.0.1 이라는 태그를 붙이고 싶다면 git tag v0.0.1 <두 번째 커밋>을 입력하면 됩니다.

① git log 또는 git log --oneline 명령으로 두 번째 커밋 해시를 확인해 봅시다.

git log --oneline

② git tag v0.0.1 <두 번째 커밋>을 입력하면 두 번째 커밋에 v0.0.1 태그가 붙습니다.

git tag v0.0.1 해쉬

③ git log 또는 git log --oneline 명령으로 두 번째 커밋에 붙은 태그를 확인해 보세요.

2. git tag --list: 태그 조회하기

① 태그 목록을 조회하는 명령은 git tag --list 또는 git tag -l 입니다. 단순히 git tag라고만 입력해도 됩니다.
git tag --list
git tag -l
git tag

3. git tag --delete <태그> : 태그 삭제하기

태그를 삭제하는 명령은 git tag --delete <태그> 또는 git tag -d <태그>입니다.

① git tag 명령으로 현재 태그를 확인합니다.
git tag

② git tag --delete v0.0.1 명령으로 v0.0.1 태그를 삭제하겠습니다.
git tag --delete v0.0.1

③ 태그 목록을 조회해 태그가 삭제됐음을 확인해 보세요.
git tag

④ 이번에는 git tag -d v1.0.0 명령으로 v1.0.0 태그도 삭제하겠습니다.
git tag -d v1.0.0

⑤ git tag 명령으로 현재 태그를 조회하여 태그가 삭제된 것을 확인해 보세요.
git tag

명령어 정리 노트

git init			로컬 저장소 만들기

git status		작업 디렉터리 상태 확인하기

git add		git add <스테이지에 추가할 대상>							<스테이지에 추가할 대상>을 스테이지에 올리기
			git add .											모든 변경 사항을 스테이지에 올리기

git commit		git commit											자세한 커밋 메시지와 함께 커밋하기
			git commit --message "<커밋 메시지>"						<커밋 메시지>로 커밋하기
			git commit -m "<커밋 메시지>"

git log		git log											커밋 목록 조회하기
			git log --oneline										커밋 목록을 한 줄로 조회하기
			git log --patch										커밋별 변경 사항 목록 조회하기
			git log -p
			git log --graph										커밋 목록을 그래프로 조회하기
			git log --branches										모든 브랜치의 커밋 목록 조회하기

git tag		git tag <태그>										<태그> 추가하기
			git tag <태그> <커밋>									<커밋>에 <태그> 추가하기
			git tag											태그 목록 조회하기
			git tag --list
			git tag -l
			git tag --delete <태그>									<태그> 삭제하기
			git tag -d <태그>							

