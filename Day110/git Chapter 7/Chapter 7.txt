7장 명령어로 버전 관리하기 2

* git diff : 최근 커밋과 작업 디렉터리 비교하기
* git diff --staged: 최근 커밋과 스테이지 비교하기
* git diff <커밋> <커밋> : 커밋끼리 비교하기
* git diff <브랜치> <브랜치> : 브랜치끼리 비교하기
* git reset <되돌아갈 커밋> : <되돌아갈 커밋>으로 되돌아가기
* git revert <취소할 커밋> : <취소할 커밋>이 취소된 새로운 커밋 만들기
* git stash : 변경 사항 임시 저장하기
* git stash list : 임시 저장한 내역 조회하기
* git stash apply <스태시> : 임시 저장한 작업 적용하기
* git stash drop <스태시> : 임시 저장한 작업 삭제하기
* git branch <브랜치> : 브랜치 나누기
* git checkout <브랜치> : 체크아웃하기
* git merge <브랜치> : 브랜치 병합하기
* git rebase <브랜치> : 브랜치 재배치하기

7.1 버전 비교하기

⓪ git diff: 최근 커밋과 작업 디렉터리 비교하기

git diff 명령은 최근 커밋과 현재 작업 디렉터리(현재 작업 내역)의 차이를 출력합니다. 이 명령은 보통 커밋한 이후로 작업 디렉터리에서 무엇을 수정했는지 확인하기 위해 사용합니다.
깃 저장소에 다음과 같이 커밋이 쌓여 있다고 가정해 봅시다. 첫 번째 커밋(first commit)은 문자 A가 저장된 a.txt라는 파일을 생성한 커밋입니다. 두 번째 커밋(second commit)은 a.txt 파일에 문자 B를 추가한 커밋입니다. 그리고 세 번째 커밋(third commit)은 a.txt 파일에 문자 C를 추가한 커밋입니다.

git log

① a.txt 파일에 마지막 줄에 문자 D를 추가한 뒤 저장합니다.
② a.txt 파일에 변경 사항이 생겼죠? 여기서 git diff를 입력해 보세요. 최근 커밋에 비해 무엇이 달라졌는지가 출력됩니다. 최근 커밋과 비교했을 때 문자 D가 새롭게 추가됐으니 +D가 출력됩니다.

2 git diff --staged : 최근 커밋과 스테이지 비교하기

스테이지에 추가된 항목과 최근 커밋의 차이를 보여주는 명령은 git diff --cached 또는 git diff --staged입니다. 이 명령으로 스테이지와 최근 커밋을 비교해 보겠습니다.

① 앞서 생성한 변경 사항을 스테이지에 추가합니다.
git add a.txt

② git diff --staged 명령을 입력하면 스테이지에 추가된 항목과 최근 커밋의 차이가 출력됩니다.

③ git diff <커밋> <커밋> : 커밋끼리 비교하기

커밋 간 차이를 비교하는 명령은 git diff <커밋> <커밋> 입니다. <커밋>에는 비교하려는 커밋의 해시를 입력하면 되는데, 짧은 커밋 해시를 이용해도 무방합니다.

① 앞서 스테이지로 올린 a.txt 파일을 커밋합니다. 커밋 메시지는 fourth commit으로 하겠습니다.
git commit -m "fourth commit"

세 번째 커밋(third commit)과 네 번째 커밋(fourth commit)의 차이는 다음과 같습니다.
여기서 주의해야 할 포인트가 있습니다. 네 번째 커밋은 세번째 커밋에 비해 무엇이 다른가요? 반대로, 세 번째 커밋은 네 번째 커밋에 비해 무엇이 다른가요? 네 번째 커밋은 세 번째 커밋에 비해 문자 D가 추가됐습니다. 반면, 세 번째 커밋은 네 번째 커밋에 비해 문자 D가 없습니다.
이렇듯 무엇을 기준으로 비교하느냐에 따라 비교의 결과는 다릅니다. 따라서 명령어로 커밋 간 차이를 비교할 때는 다음과 같이 이해하는 것이 좋습니다.

git diff <이 커밋을 기준으로> <이 커밋이 달라진 점>

② git log 또는 git log --oneline 명령으로 세 번째 커밋과 네 번째 커밋 해시를 확인해 보세요.
git log --oneline

③ 세 번째 커밋을 기준으로 네 번째 커밋이 달라진 점을 알고 싶다면 git log <세 번째 커밋> <네 번째 커밋>을 입력하면 되겠죠? 세 번째 커밋에 비해 네 번째 커밋은 문자 D가 추가됐으므로 명령의 결과가 +D라고 나옵니다.
git diff <세 번째 커밋> <네 번째 커밋>

④ 네 번째 커밋을 기준으로 세 번째 커밋이 다른 점도 알아봅시다. 이 경우 git log <네 번째 커밋> <세 번째 커밋>을 입력하면 되겠죠? 네 번째 커밋에 비해 세 번째 커밋은 문자 D가 없으니 명령의 결과가 -D라고 뜨게 됩니다.
git diff <네 번째 커밋> <세 번째 커밋>

커밋끼리 비교할 때 좋은 팁을 소개하겠습니다. 커밋을 비교할 때 매번 커밋 해시를 조회하고 붙여넣는 것이 번거롭다면, HEAD를 기준으로 비교해도 됩니다. HEAD는 현재 브랜치의 최신 커밋을 가리키지요?
HEAD^ 또는 HEAD~1은 현재 브랜치의 최신 커밋에서 하나 이전 커밋을 가리킵니다. HEAD^^ 또는 HEAD~2는 최신 커밋에서 두 개 이전 커밋을 가리킵니다. 다시 말해, HEAD 뒤에 붙는 ^의 개수 또는 HEAD~ 뒤에 붙는 숫자는 ^HEAD에서 몇 번째 이전을 나타내는지'를 의미합니다.

git diff HEAD^ HEAD 또는 git diff HEAD~1 HEAD
git diff HEAD HEAD^ 또는 git diff HEAD HEAD~1

4. git diff <브랜치> <브랜치> : 브랜치끼리 비교하기

git diff 명령으로 브랜치끼리 비교할 수도 있습니다.

이런 상황을 가정해 보겠습니다. master 브랜치에 a.txt 파일을 만들고, 문자 A를 저장한 뒤 커밋합니다. 여기서 foo 브랜치를 만들고, foo로 체크아웃한 뒤 a.txt 파일 안에 문자 B를 추가한 뒤 다시 커밋합니다.
여기서 git diff <브랜치> <브랜치> 명령으로 두 브랜치의 차이를 알 수 있습니다. 이 명령 또한 다음과 같이 이해하는 것이 좋습니다.

git diff <기준이 되는 브랜치> <기준과 비교할 브랜치>

가령 master 브랜치를 기준으로 foo 브랜치가 달라진 점을 확인하려면 다음과 같이 입력합니다.

git diff master foo

7.2 작업 되돌리기
변경 사항 또는 버전을 되돌리는 방법에는 크게 reset과 revert가 있습니다. 두 방법의 차이, reset의 세 종류(soft reset, mixed reset, hard reset).

깃 저장소에 다음과 같이 네 개의 커밋이 쌓여 있다고 가정해 보겠습니다. 첫 번째 커밋(first commit)은 문자 A가 저장된 a.txt를 만든 커밋입니다. 두 번째 커밋(second commit)은 a.txt에 문자 B를 추가한 커밋, 세 번째 커밋(third commit)은 a.txt에 문자 C를 추가한 커밋, 네 번째 커밋(fourth commit)은 a.txt에 문자 D를 추가한 커밋입니다.

git log --oneline

즉, a.txt 파일은 다음과 같은 과정으로 만들어졌습니다.

1. git reset <되돌아갈 커밋> : 예전 커밋으로 되돌아가기

현재 상황에서 reset을 연습해 봅시다. reset은 저장소를 특정 커밋으로 완전히 되돌리는 방식입니다. 그리고 reset의 종류에는 soft, mixed, hard 이렇게 세 가지 방식이 있다고 했죠.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
reset의 종류

종류						내용
soft reset					커밋만 되돌리기
mixed reset					스테이지까지 되돌리기
hard reset					작업 디렉터리까지 되돌리기
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

우선 soft reset부터 알아보겠습니다. soft reset이 뭐라고 했었죠? 커밋만 되돌리는 방법이라고 했습니다. 네 번째 커밋은 a.txt 파일에 문자 D를 추가했습니다. 이를 세 번째 커밋으로 soft reset 한다면 a.txt 파일에 D를 추가한 뒤 스테이지로 추가한 순간으로 되돌아갑니다. soft reset하는 명령은 git reset --soft <되돌아갈 커밋>입니다. 세 번째 커밋으로 soft reset하는 명령은 git reset --soft <세 번째 커밋>이 되겠죠?

① 다음과 같이 세 번째 커밋으로 soft reset 해 보세요.
git log --oneline
git reset --soft <세번째 커밋>

/////////////////////////////////////////////////////////////
TIP
git reset --soft HEAD^ 또는 git reset --soft HEAD~1 명령을 입력해도 무방합니다.
/////////////////////////////////////////////////////////////

② 그런 다음 git log 또는 git log --oneline으로 커밋 목록을 확인해 봅시다. 네 번째 커밋이 사라졌죠?

git log --oneline

③ 그런데 a.txt 파일을 열어보면 문자 D가 아직 적혀 있음을 볼 수 있습니다.
④ 또한, git diff --staged 명령으로 세 번째 커밋(현재 최근 커밋)과 스테이지의 차이를 보면 문자 D가 추가된 변경 사항이 스테이지로 추가되어 있는 것을 볼 수 있습니다.
git diff --staged

이게 시사하는 점이 무엇일까요? 세 번째 커밋으로 soft reset 하는 것은 곧 네 번째 커밋이 만들어진 그 순간만을 되돌린다는 것을 의미합니다. 정확하게는, 네 번째 커밋을 만들기 위해 파일을 수정하고 변경 사항을 스테이지에 추가한 순간으로 되돌아가는 것이지요.

⑤ 여기까지 이해했다면 다시 네 번째 커밋을 만들어 보겠습니다.
git commit -m "fourth commit"

이번에는 mixed reset을 실습해 보겠습니다. mixed reset은 스테이지에 추가하고 커밋한 사실을 되돌립니다. mixed reset하는 명령은 git reset <되돌아갈 커밋> 또는 git reset --mixed <되돌아갈 커밋>입니다. 즉, 아무 옵션 없이 git rest 명령을 사용하면 mixed reset이 됩니다.

가령 두 번째 커밋으로 mixed reset하는 명령은 git reset --mixed <두 번째 커밋> 또는 git reset <두 번째 커밋>입니다.

① git log --oneline 명령으로 세 번째 커밋 해시를 확인하고 mixed reset 명령인 git reset <세 번째 커밋>을 입력해 보세요.
git log --oneline
git reset <세 번째 커밋>

///////////////////////////////////////////////////////////////////////
git reset HEAD^ 또는 git reset HEAD~1 명령을 입력해도 무방합니다.
////////////////////////////////////////////////////////////////////////

② git log 또는 git log --oneline으로 커밋 목록을 확인해 봅시다.
git log --oneline

③ a.txt 파일을 열어보면 아직 문자 D가 적혀 있는 걸 볼 수 있습니다.

④git status 명령을 입력하여 작업 디렉터리를 확인해 보세요. Changes not staged for commit 항목에 a.txt가 보이나요? 이는 a.txt 파일이 변경만 됐을 뿐 아직 스테이지에 추가되지는 않았음을 의미합니다.

git status

즉, mixed reset은 커밋한 사실과 스테이지에 추가한 사실만을 되돌릴 뿐 파일을 수정한 내역까지 되돌리지는 않는 방식임을 알 수 있습니다.

⑤ 확인을 마쳤다면 다시 네 번째 커밋을 만들어 보세요.
git commit -am "fourth commit"

마지막으로 hard reset을 실습해 볼까요? hard reset은 파일을 수정했던 사실까지 완전하게 되돌리는 방식입니다. 가령 세 번째 커밋으로 hard reset하면 네 번째 커밋을 만들기 위해 파일을 수정하고 스테이지에 추가하고 커밋한 사실 모두가 사라지게 되지요.
hard reset하는 명령은 git reset --hard <되돌아갈 커밋>입니다. 즉, 세 번째 커밋으로 hard reset 하는 명령은 git reset --hard <세 번째 커밋> 입니다. 직접 확인해 봅시다.

① 세번째 커밋 해시를 확인합니다.
git log --oneline

② git reset --hard <세 번째 커밋> 명령을 확인합니다.
git reset --hard <세 번째 커밋>

////////////////////////////////////////////////////////////
git reset --hard HEAD^ 또는 git reset --hard HEAD~1 명령을 입력해도 무방합니다.
/////////////////////////////////////////////////////////////

③ git log 또는 git log --oneline으로 커밋 목록을 확인해 봅시다. 네 번째 커밋이 사라졌죠?
git log --oneline

④ a.txt 파일을 열어 확인해도 네 번째 커밋의 내용(D 추가)이 사라졌음을 알 수 있습니다. 즉, hard reset을 통해 세 번째 커밋으로 완전하게 리셋된 셈입니다.

2. git revert <취소할 커밋> : 취소된 새로운 커밋 만들기

reset이 특정 커밋으로 되돌아가는 방식이라면, revert는 해당 커밋을 취소한 새로운 커밋을 추가하는 방식입니다. git revert <취소할 커밋> 명령을 사용하면 됩니다.

참고로, 여기서 주의해야 할 점이 있습니다. git reset은 뒤에 되돌아갈 커밋을 명시합니다. 반면 git revert는 뒤에 취소할 커밋을 명시합니다. 가령 git reset <두 번째 커밋>은 두 번째 커밋으로 돌아가는 명령입니다. 반면 git revert <두 번째 커밋>은 두 번째 커밋을 취소한 새로운 커밋을 추가하는 명령입니다.

자, 그럼 revert를 실습해 봅시다.

① git log 또는 git log --oneline 명령으로 현재 커밋을 조회해 봅시다. 현재 커밋이 세 개 쌓여 있습니다.
② 여기서 세 번째 커밋을 되돌린 새로운 커밋을 만들어 보겠습니다. git revert <세 번째 커밋> 명령을 입력하면 되겠죠?
git revert <세 번째 커밋>
////////////////////////////////////////////////////////////////////////////////
TIP
git revert HEAD 명령을 입력해도 무방합니다.
///////////////////////////////////////////////////////////////////////////////

③ git commit 명령을 입력했을 때처럼 Vim 창이 나타납니다. revert는 기존의 커밋을 취소한 새로운 커밋을 만드는 명령이기 때문에, 커밋 메시지를 작성해야 합니다. 지금 보이는 메시지, 즉 하단의 박스는 기본으로 작성된 커밋 메시지입니다.
④ 커밋 메시지를 작성후, :wq 입력 후 Enter를 누릅니다.
⑤ 새로운 커밋이 성공적으로 만들어졌다면, a.txt 파일을 열어보면, 세 번째 커밋이 취소된 것을 알수 있습니다.
⑥ git log로 커밋 내역을 살펴봅시다. Revert "third commit"이라는 새로운 커밋이 추가된 것을 볼 수 있습니다.
⑦ 추가된 새 커밋은 기존의 세 번째 커밋의 작업 내역을 뒤로 돌리는 커밋입니다. 다음과 같이 git diff 명령으로도 확인할 수 있지요.
git diff HEAD^ HEAD

7.3 작업 임시 저장하기

1. git stash : 변경 사항 임시 저장하기

스태시 명령은 기본적으로 tracked 상태의 파일에 대해서만 사용할 수 있기 때문에 우선 버전 하나를 만들어 보겠습니다.

① 문자 A가 저장된 a.txt 파일을 만들어 보세요.
② 이를 스테이지에 추가하고 커밋합니다. 커밋 메시지는 first commit이라고 하겠습니다.
git add a.txt
git commit -m "first commit"
③ a.txt 파일에 문자 B를 추가해 a.txt 파일을 수정합니다.
④ 이제 이 수정 내역, 즉 문자 B를 추가한 작업을 임시 저장하겠습니다. 명령은 git stash 입니다.
단순히 git stash 명령을 입력해도 작업이 임시 저장되지만, git stash -m "메시지" 또는 git stash --message "<메시지" 명령으로 간단한 메시지와 함께 임시 저장할 수도 있습니다. 이는 임시 저장할 작업에 간단한 메모를 붙여 놓는 것과 같습니다.
가령 add B 라는 간단한 메시지와 함께 현재 수정 내역을 임시 저장해 보겠습니다. git stash -m "add B" 명령을 입력하면 되겠죠?

git stash -m "add B"

⑤ 이제 a.txt 파일을 다시 열어봅시다. 방금 수정했던 내용은 온데간데없고, 첫 커밋을 만든 상태로 돌아간 것을 알 수 있습니다. B를 추가한 수정 사항이 임시 저장된 것입니다.
⑥ 한 번 더 실습해 봅시다. 이번에는 a.txt 파일에 문자 C를 추가하겠습니다.
⑦ 이 작업도 임시 저장해 보겠습니다. 이번에는 add C라는 메시지와 함께 작업을 임시 저장하겠습니다. 명령은 git stash -m "add C"입니다.
⑧ 다시 a.txt 파일로 돌아와 작업한 내역이 사라진(임시 저장된) 것을 확인해 보세요.

2. git stash list: 임시 저장된 작업 내역 조회하기

앞 절에서 두 개의 작업을 임시 저장했습니다. 임시 저장된 작업을 조회해 봅시다. 스태시한 작업 목록을 조회하는 명령은 git stash list입니다.

$ git stash list
stash@{0}: On master: add C
stash@{1}: On master: add B

임시 저장한 항목이 두 개 나옵니다. 하나는 stash@{0}이고, 또 다른 하나는 stash@{1}입니다. 임시 저장된 항목에 붙는 번호, 즉 0과 1 같은 번호는 최근에 저장된 작업일수록 숫자가 작습니다. 만일 또 다른 작업을 임시 저장하면 문자 C를 추가한 변경 사항(add C)은 stash@{1}이 되고, 문자 B를 추가한 변경 사항(add B)은 stash@{2}가 됩니다.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-m 이나 --message 옵션을 사용하지 않았다면?

앞서 git stash 명령으로 작업을 임시 저장할 때 -m이나 --message 옵션으로 간단한 메시지를 함께 저장했던 것을 기억하나요? 만일 아무런 메시지도 작성하지 않은 채 git stash 명령을 입력했다면 git stash list의 결과는 다음과 같습니다.

$ git stash list
stash@{0}: WIP on master: 1ab66e8 first commit
stash@{1}: WIP on master: 1ab66e8 first commit

WIP는 Work In Progress의 준말이고, 1ab66e8은 스태시가 만들어진 커밋, first commit은 스태시가 만들어졌던 커밋의 커밋 메시지입니다.

3. git stash apply <스태시>: 임시 저장된 작업 적용하기 

이제 스태시에 임시 저장된 작업을 적용해 보겠습니다. 임시 저장된 작업을 작업 디렉터리에 적용하는 명령은 git stash apply <스태시>입니다.
가령 stash@{0}를 적용하는 명령은 git stash apply stash@{0}입니다. stash@{1}을 적용하는 명령은 git stash apply stash@{1}이지요.
스태시 이름을 명시하지 않고 그냥 git stash apply 명령을 입력할 경우 최근에 임시 저장한 항목, 즉 stash{0}가 적용됩니다.

① git stash list 명령으로 현재 임시 저장된 작업을 확인해 보세요.
git stash list

② 이제 임시 저장된 변경 사항 stash@{0}를 적용해 보겠습니다. git stash apply stash@{0}를 입력해 보세요. a.txt 파일이 수정됐다(modified)고 나오지요?
git stash apply stash@{0}

③ a.txt 파일을 확인해 보세요. a.txt 파일에 문자 C를 추가했던 stash@{0}의 변경 사항이 적용된 것을 볼 수 있습니다.

4. git stash drop <스태시>: 임시 저장된 작업 삭제하기

① 현재 임시 저장된 항목을 확인해 봅시다.
git stash list

② stash@{0}를 스태시에서 삭제해 보겠습니다. 명령은 git stash drop stash@{0}입니다.
git stash drop stash@{0}

③ git stash drop stash@{0} 명령으로 스태시를 삭제하면 기존에 stash@{0} 였던 작업(add C)은 목록에서 삭제되고, stash@{1}이었던 작업(add B)이 stash@{0}가 됩니다.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TIP
참고로 git stash clear는 임시 저장된 작업을 전부 삭제하는 명령입니다.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

7.4 브랜치 관리하기

① 우선 브랜치를 실습할 환경을 만들어 봅시다. 문자 A가 적힌 a.txt 파일을 만들고 커밋합니다. 커밋 메시지는 first commit으로 하겠습니다.
git add a.txt
git commit -m "first commit"

② 이번에는 b.txt 파일을 만들고 B를 적은 뒤 커밋합니다. 커밋 메시지는 second commit으로 하겠습니다.
git add b.txt
git commit -m "second commit"

③ 마지막으로 C가 적힌 c.txt 파일을 만들고 커밋합니다. 커밋 메시지는 third commit으로 하겠습니다.
git add c.txt
git commit -m "third commit"

지금까지 만든 세 커밋은 모두 master 브랜치에 속해 있습니다.

④ 현재 여러분이 어떤 브랜치에 있는지는 어떻게 알 수 있을까요? 깃 배시로 알 수 있습니다. (master)라고 적혀 있죠? 이는 현재 작업 중인 브랜치가 master 브랜치임을 나타냅니다.
⑤ 또는 git branch 명령으로도 알 수 있습니다. git branch 명령을 입력하면 현재 브랜치의 목록과 함께 현재 여러분이 작업 중인 브랜치가 *로 표시됩니다.
git branch

1. git branch <브랜치>: 브랜치 나누기

이제 브랜치를 만들어 보겠습니다. 브랜치를 만드는 명령은 git branch <브랜치>입니다. 가령 foo라는 브랜치를 만드는 명령은 git branch foo입니다.
① git branch foo 명령을 입력해 foo 브랜치를 만듭니다.
git branch foo

② git branch 명령으로 만들어진 foo 브랜치를 확인합니다.
git branch

2. git checkout <브랜치>: 체크아웃하기

체크아웃이란 해당 브랜치로 작업 환경을 바꾸는 것을 의미한다고 했습니다. 특정 브랜치로 체크아웃하는 명령은 git checkout <브랜치>입니다.

① foo 브랜치로 체크아웃하는 명령은 git checkout foo입니다. 깃 배시에서(master)가 (foo)로 변경됐다면 올바르게 체크아웃한 것입니다.
git checkout foo

② foo 브랜치에서 커밋을 몇 번 해볼까요? 문자 D가 저장된 foo_d.txt 파일을 만들고 커밋합니다. 커밋 메시지는 fourth commit으로 하겠습니다.
git add foo_d.txt
git commit -m "fourth commit"

③ 이번에는 foo_e.txt 파일을 만들고 E를 적은 뒤 커밋합니다. 커밋 메시지는 fifth commit으로 하겠습니다.
git add foo_e.txt
git commit -m "fifth commit"

자, 지금까지의 상황을 브랜치로 표현하면 다음과 같습니다. master 브랜치에는 커밋 세 개가 쌓여 있고, foo 브랜치에는 커밋 다섯 개가 쌓여 있습니다.
④ git checkout master 명령으로 master 브랜치로 체크아웃해 보세요. master 브랜치로 체크아웃하는 순간, 마법처럼 파일이 세 개만 남는 것을 확인할 수 있습니다.

git checkout master

⑤ 앞서 git diff <브랜치> <브랜치> 명령으로 두 브랜치의 차이를 확인할 수 있다고 했죠? 가령 master 브랜치에 비해 foo 브랜치가 다른 점을 확인하고 싶다면 git diff master foo 명령을 입력하면 됩니다.

git diff master foo

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
브랜치를 만듦과 동시에 체크아웃하기

새로운 브랜치를 만드는 명령은 git branch <브랜치>, 특정 브랜치에 체크아웃하는 명령은 git checkout <브랜치>라고 했습니다.
이 둘을 동시에 하는 유용한 명령이 있는데, 바로 git checkout -b <브랜치> 입니다. 가령 bar라는 새로운 브랜치를 만듦과 동시에 체크아웃하는 명령은 git checkout -b bar입니다.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

3. git merge <브랜치>: 브랜치 병합하기

자, 그렇다면 foo 브랜치를 master 브랜치에 병합해 보겠습니다. 브랜치를 병합하는 명령은 git merge <병합할 브랜치>입니다. 만일 foo 브랜치를 master 브랜치에 병합하고 싶다면 master 브랜치로 체크아웃한 뒤 git merge foo 명령을 입력하면 됩니다.

/////////////////////////////////////////////////////////////////////////////////////////////////////
TIP
master 브랜치에 체크아웃되어 있지 않다면 다음과 같이 master 브랜치로 체크아웃해 주세요.

git checkout master
/////////////////////////////////////////////////////////////////////////////////////////////////////

① 여기서 git merge foo 명령을 입력하면 foo 브랜치가 master 브랜치로 병합됩니다.
② 병합 이후 작업 디렉터리를 확인하면 foo 브랜치에서 만들었던 foo_d.txt와 foo_e.txt 파일을 master 브랜치에서 볼 수 있습니다.

4. 충돌 해결

앞에서 브랜치를 병합할 때 충돌이 발생할 수도 있다고 했습니다. 명령어로 브랜치를 병합하는 과정에서 충돌이 발생할 경우, 이를 어떻게 해결할 수 있는지 알아봅시다.
① 우선 충돌이 발생한 상황을 만들어 보겠습니다. master 브랜치에서 있는 a.txt 파일을 수정합니다.  내용을 master로 수정하고 커밋해 보겠습니다. 커밋 메시지는 master commit으로 하겠습니다.
git add a.txt
git commit -m "master commit"

② foo 브랜치로 체크아웃합니다.
git checkout foo

③ 이번에는 a.txt 파일의 내용을 foo로 수정한 뒤 커밋하겠습니다. 커밋 메시지는 foo commit으로 하겠습니다.
④ 다시 master 브랜치로 체크아웃해 보겠습니다. 현재 master 브랜치와 foo 브랜치는 같은 파일을 서로 다르게 수정했습니다. master 브랜치에서는 a.txt 파일을 master라고 수정했고, foo 브랜치에서는 a.txt 파일을 foo라고 수정했죠. 그래서 foo 브랜치를 master 브랜치로 병합하면 충돌이 발생합니다.
git checkout master

⑤ master 브랜치에서 git merge foo 명령으로 foo 브랜치를 master 브랜치로 병합해 보세요. 브랜치 이름을 보면 (master)가 아닌 (master|MERGING)으로 표기되는 것을 볼 수 있습니다. 이는 '현재 충돌이 발생했으니, 이를 해결하고 다시 커밋하여 병합을 완성하라'는 의미입니다.

⑥ a.txt 파일을 열어보겠습니다. a.txt 파일의 내용이 다음과 같이 변경되어 있습니다.

/////////////////////////////////////////////////////////////////////////////////////////////////

<<<<<<< HEAD
master
=======
foo
>>>>>>> foo


////////////////////////////////////////////////////////////////////

<<<<<<<<<<<<<<<<, =========================, >>>>>>>>>>>>>>>> 기호는 일종의 영역 표기라고 했습니다. ================== 기호의 윗부분은 HEAD가 가리키는 브랜치, 즉 master 브랜치의 내용이 적혀 있고, ============ 기호의 아랫부분은 foo 브랜치의 내용이 적혀 있습니다.

⑦ 여기서 여러분은 병합의 결과로 master 브랜치의 내용 (<<<<<<<<< 기호와 =========== 기호 사이의 내용)을 선택할지, foo 브랜치의 내용(============ 기호와 >>>>>>>>> 기호 사이의 내용)을 선택할지 결정해야 합니다. 여기에서는 병합의 결과로 master 브랜치의 내용을 반영하려 합니다. a.txt 파일의 내용을 다음과 같이 수정하겠습니다.

////////////////////////////////////////

master

/////////////////////////////////////

⑧ 이제 이를 스테이지에 추가하고, 커밋하면 성공적으로 병합됩니다. git add a.txt 명령으로 a.txt 파일을 스테이지로 추가합시다.
git add a.txt

⑨ 커밋해 보겠습니다. git commit 명령을 입력하세요. 미리 입력된 커밋 메시지가 나옵니다. 이 메시지 그대로 커밋 메시지로 삼겠습니다.
/////////////////////////////////////////
Merge branch 'foo'  // 기본으로 작성된 커밋 메시지
/////////////////////////////////////////

⑩ :wq를 입력하여 입력된 커밋 메시지를 저장하고 Vim 창을 닫아주세요.
⑪ 충돌을 해결해, 성공적으로 병합했습니다. a.txt 파일을 열어볼까요? 반영하려던 브랜치의 내용, 즉 master 브랜치의 내용이 반영되어 있습니다.

정리해 보겠습니다. 충돌이 발생했을 경우, 여러분은 충돌이 발생한 브랜치 중 어떤 브랜치의 내용을 최종적으로 반영할지 직접 선택해야 합니다. 어떤 내용을 반영할지 직접 선택한 뒤 충돌이 발생한 파일을 스테이지에 추가하고 커밋하면 병합이 완료됩니다.

5. git branch -d <브랜치>: 브랜치 삭제하기

브랜치를 삭제하는 명령은 git branch -d <브랜치> 또는 git branch --delete <브랜치> 입니다. 가령 foo 브랜치를 삭제하려면 git branch -d foo 또는 git branch --delete foo를 입력하면 됩니다.

① 우선, foo 브랜치를 삭제하려면 foo가 아닌 브랜치로 체크아웃해야 합니다. 만일 foo 브랜치에 체크아웃되어 있다면 master 브랜치로 체크아웃하세요.

git checkout master

② git branch -d foo 명령으로 foo 브랜치를 삭제해 보겠습니다.
git branch -d foo

③ git branch 명령으로 브랜치 목록을 확인하면 foo 브랜치가 삭제됐음을 확인할 수 있습니다.
git branch

6. git rebase <브랜치>: 브랜치 재배치하기
브랜치의 재배치가 뭐라고 했었죠? 브랜치가 뻗어나온 기준점을 옮기는 방법이라고 했습니다.

① 지금까지 실습을 잘 따라왔다면 현재 master 브랜치에서의 커밋 목록은 다음과 같을 것입니다. git log --oneline 명령으로 커밋 목록을 확인합니다.

$ git log --oneline
6321fd7 (HEAD -> master) Merge branch 'foo'
eceb403 foo commit
3a76225 master commit
c194bd9 fifth commit
dc82ad4 fourth commit
cc2b9f4 third commit
18a6ae7 second commit
019add8 first commit

② master 브랜치에서 bar 브랜치를 만든 뒤 체크아웃하겠습니다.
git branch bar

git checkout bar

③ 이제 만들어진 bar 브랜치에 두 개의 커밋을 쌓아봅시다. 첫 번째 커밋(bar first)은 문자 A가 저장된 bar_a.txt 파일을 만든 커밋이고, 두 번째 커밋(bar second)은 문자 B가 저장된 bar_b.txt 파일을 만든 커밋입니다.

git add bar_a.txt
git commit -m "bar first"
git add bar_b.txt
git commit -m "bar second"

④ git log --oneline --branches 명령을 입력해 지금까지의 커밋을 확인하겠습니다.
bar 브랜치는 현재 master 브랜치의 최신 커밋(Merge branch 'foo')에서부터 뻗어나와 커밋 두 개가 쌓여 있는 상태지요.

⑤ 자, 그렇다면 다시 master 브랜치로 체크아웃해 보세요.
git checkout master

⑥ master 브랜치에서도 두 개 정도의 커밋을 더 만들어 보겠습니다. 문자 D가 저장된 d.txt 파일을 만든 커밋(ninth commit), 문자 E가 저장된 e.txt 파일을 만든 커밋(tenth commit)을 만들어 보세요.
git add d.txt
git commit -m "ninth commit"
git add e.txt
git commit -m "tenth commit"

⑦ 지금까지의 커밋을 확인해 보겠습니다.
git log --oneline --branches

이 상황에서 bar 브랜치를 master 브랜치로 재배치하면 어떻게 될까요? 현재 bar 브랜치는 Merge branch 'foo'라는 커밋에서 뻗어나왔었죠? 즉, bar 브랜치의 현재 기준점을 Merge branch 'foo' 커밋입니다. 이때, bar 브랜치를 master 브랜치로 재배치하면 다음 그림과 같이 bar 브랜치의 기준점이 tenth commit으로 이동하게 됩니다.

⑧ 직접 실습해 확인하겠습니다. 브랜치를 재배치하는 명령은 git rebase <브랜치>입니다. bar 브랜치를 master 브랜치로 재배치하려면 bar 브랜치로 체크아웃한 뒤 git rebase master 명령을 입력하면 됩니다.
git checkout bar
git rebase master

⑨ 이제 커밋 목록을 확인해 보겠습니다. bar first와 bar second의 위치가 달라졌습니다. rebase한 후 bar first와 bar second는 Merge branch 'foo'가 아닌 tenth commit 위에 쌓여 있음을 확인할 수 있습니다. 다시 말해, bar 브랜치의 기준점이 tenth commit으로 옮겨간 것이지요.

git log --oneline --branches

⑩ 참고로 bar 브랜치를 master 브랜치로 재배치한 결과를 다음과 같이 커밋당 한 줄로 출력된 그래프 형태로도 확인할 수 있습니다.
git log --oneline --branches --graph

명령어 정리 노트

git diff				git diff						최근 커밋과 작업 디렉터리 비교하기
					git diff --staged					최근 커밋과 스테이지 비교하기
					git diff <커밋> <커밋>				<커밋>끼리 비교하기
					git diff <브랜치> <브랜치>			<브랜치>끼리 비교하기

git reset				git reset --soft <되돌아갈 커밋>		<되돌아갈 커밋>으로 soft reset 하기
					git reset --mixed <되돌아갈 커밋>		<되돌아갈 커미>으로 mixed reset 하기
					git reset <되돌아갈 커밋>
					git reset --hard <되돌아갈 커밋>		<되돌아갈 커밋>으로 hard reset 하기

git revert <취소할 커밋>									<취소할 커밋>이 취소된 새로운 커밋 만들기

git stash				git stash						변경 사항 임시 저장하기
					git stash --message "<메시지>"			<메시지>와 함께 변경 사항 임시 저장하기
					git stash -m "<메시지>"
					git stash list						임시 저장된 작업 내역 조회하기
					git stash apply <스태시>				임시 저장된 작업 적용하기
					git stash drop <스태시>				임시 저장된 작업 삭제하기

git branch				git branch						브랜치 목록 조회하기
					git branch <브랜치>				<브랜치> 만들기
					git branch --delete <브랜치>			<브랜치> 삭제하기
					git branch -d <브랜치>

git checkout	 <브랜치>									<브랜치>로 체크아웃하기
git checkout -b <브랜치>								<브랜치> 생성하고 체크아웃하기
git rebase <브랜치>									<브랜치>로 재배치하기
					
