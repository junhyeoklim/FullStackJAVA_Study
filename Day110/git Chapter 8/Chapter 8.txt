8장 명령어로 깃허브로 다루기

git clone: 원격 저장소를 복제하기
git remote: 원격 저장소를 추가, 조회, 삭제하기
git push: 원격 저장소에 밀어넣기
git fetch: 원격 저장소를 일단 가져만 오기
git pull: 원격 저장소를 가져와서 합치기
git <명령> --help: 매뉴얼 페이지 보기


1. git clone: 원격 저장소를 복제하기
원격 저장소를 클론하는 명령은 git clone <원격 저장소>입니다.

여러분이 만든 collaboration 저장소를 여러분의 컴퓨터로 클론해 볼까요?
① 원격 저장소 링크에 들어가 보세요.
https://github.com/계정/collaboration

② Code를 클릭한 다음 원격 저장소 경로를 복사해 주세요.
③ 이제 이 저장소를 클론받을 위치에서 깃 배시를 열어주세요. 여기에서는 C:\에 클론받기 위해 C:\ 경로에서 깃 배시를 열겠습니다.
④ 이제 원격 저장소를 클론하겠습니다. 원격 저장소를 클론하는 명령은 git clone <원격 저장소>입니다. git clone을 입력하고, 복사한 경로를 붙여넣으면 됩니다.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
특정 경로로 클론받기

git clone <원격 저장소>는 암묵적으로 현재 경로(이 예시의 경우에는 C:\)에 원격 저장소를 클론합니다. 특정 경로에 원격 저장소를 클론받기 위해서는 git clone <원격 저장소> <클론받을 경로> 형식으로 명령을 입력하면 됩니다. 가령 다음 과 같이 입력한다면 원격 저장소는 C:\test에 collaboration 저장소를 클론합니다.

git clone <원격 저장소> /C/test

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

⑤ 클론받은 원격 저장소를 확인해 봅니다. 확인했다면 이 저장소는 삭제해도 좋습니다.

2. git remote : 원격 저장소를 추가, 조회, 삭제하기

git remote는 원격 저장소를 추가하고, 조회하고, 삭제할 수 있는 명령입니다.
이 명령을 자세히 학습하기 앞서 우선 상호 작용할 원격 저장소를 만들어 보겠습니다. 깃허브로 가볼까요?

① 여러분의 프로필 페이지에서 Repositories의 New를 클릭해 주세요.
② 저장소 이름(Repository name)은 test-repo로 하겠습니다. Create repository를 클릭해 주세요.
③ 원격 저장소를 만들었다면 이제 여러분의 컴퓨터에 로컬 저장소를 만들어 보겠습니다. test-repo라는 폴더를 만들고, 그 안에서 깃 배시를 열어 git init 명령으로 로컬 자장소를 만들어 보세요. C:\ 경로에 test-repo 폴더를 만들고, 그 안에서 git init 명령을 입력했습니다.

현재 로컬 저장소 test-repo는 원격 저장소 test-repo의 존재를 알지 못합니다. 따라서 로컬 저장소 test-repo는 원격 저장소 test-repo와 상호 작용할 수 없습니다. 로컬 저장소 test-repo가 원격 저장소 test-repo와 상호 작용하려면 원격 저장소 test-repo를 로컬 저장소 test-repo에 추가해야 합니다.

④ 로컬 저장소에 원격 저장소를 추가하는 명령은 git remote add <원격 저장소 이름> <원격 저장소 경로>입니다. 앞서 생성한 원격 저장소의 경로는 (원격 저장소에 들어가보면 확인할 수 있습니다.) git@github.com:... 입니다.
⑤ 이 원격 저장소를 origin이라는 이름으로 로컬 저장소에 추가하겠습니다. 명령은 git remote add origin <원격 저장소 경로>를 입력하면 되겠죠? 이렇게 원격 저장소를 추가하면 추후 orign이라는 이름으로 git@github.com:... 와 상호 작용할 수 잇씁니다.

git remote add origin <원격 저장소 경로>

//////////////////////////////////////////////////////////////////////////////////////////////
TIP
원격 저장소에서 그대로 복사-붙여넣기 해도 무방합니다.
///////////////////////////////////////////////////////////////////////////////////////////////

⑥ 추가된 원격 저장소 목록은 git remote 명령으로 확인할 수 있습니다. 방금 추가했던 원격 저장소의 이름(origin)이 보이죠?
git remote

⑦ git remote -v 또는 git remote --verbose 명령을 입력하면 원격 저장소의 이름과 경로를 함께 확인할 수 있습니다.
git remote -v

⑧ origin 이라는 이름은 얼마든지 바꿀 수 있습니다. 원격 저장소의 이름을 바꾸는 명령은 git remote rename <기존 원격 저장소 이름> <바꿀 원격 저장소 이름>  입니다. 원격 저장소의 이름을 origin에서 changed로 바꾼 뒤 git remote 또는 git remote -v 명령으로 확인해 보세요.

git remote rename origin changed
git remote
git remote -v

⑨ 추가한 원격 저장소를 삭제하는 방법도 알아봅시다. 추가한 원격 저장소를 삭제하는 명령은 간단합니다. git remote remove <원격 저장소 이름> 입니다. 가령 원격 저장소 changed를 삭제하는 명령은 git remote remove changed입니다. 삭제한 후 git remote 명령을 쳤을 때 아무것도 나오지 않는다면 성공적으로 삭제된 것입니다.

git remote remove changed
git remote

3. git push: 원격 저장소에 밀어넣기
이제 원격 저장소와의 세 번째 상호 작용, git push에 대해 알아봅시다. 푸시는 로컬 저장소의 변경 사항을 원격 저장소에 밀어넣는 방법이라고 했습니다.

① 우선 버전을 관리할 대상을 만들어 보겠습니다. 로컬 저장소 test-repo에 문자 A가 적힌 a.txt 파일을 생성한 뒤 저장하세요.
② 이를 스테이지에 추가하고, first commit이라는 커밋 메시지로 커밋하겠습니다.
git add a.txt
git commit -m "first commit"
③ 그럼 명령어로 푸시하는 방법을 익혀봅시다. 사실 로컬 저장소의 커밋(들)을 처음 원격 저장소로 푸시하는 경우, 웹 사이트에 있는 명령들을 그대로 복사-붙여넣기 하면 됩니다.

git remote add origin <원격 저장소>
git branch -M main
git push -u origin main

그럼 이 명령들의 의미를 하나씩 알아봅시다.
git remote add origin <원격 저장소>
원격 저장소 <원격 저장소> 을 origin 이라는 이름으로 추가하는 명령

git branch -M main
git branch -M <브랜치 이름>은 현재 브랜치 이름을 <브랜치 이름>으로 바꾸는 명령입니다. 즉, 이 명령은 현재 브랜치(master) 이름을 main으로 변경하는 명령입니다.

깃허브에서는 기본 브랜치의 이름을 master 브랜치가 아닌 main 브랜치로 지칭합니다. 로컬 저장소의 기본 브랜치는 master이지만 깃허브의 기본 브랜치는 main이기 때문에 로컬 저장소의 기본 브랜치(master)에서 만든 변경 사항을 깃허브의 기본 브랜치(main)로 푸시하기 위해서는 이와 같이 브랜치 이름을 main으로 변경해야 합니다.

git push -u origin main
git push <원격 저장소 이름> <브랜치 이름>은 <원격 저장소 이름>으로 <브랜치 이름>을 푸시하는 명령입니다. 다시 말해, git push origin main은 원격 저장소 origin으로 로컬 저장소 main 브랜치의 변경 사항을 푸시하는 명령입니다.

-u 옵션은 처음 푸시할 때 한 번만 사용하면 되는데, 이 옵션과 함께 푸시하면 추후 간단히 git push(또는 git pull) 명령만으로 origin의 main 브랜치로 푸시(또는 풀)할 수 있습니다.

④ 원격 저장소를 확인하면 로컬 저장소에서 커밋한 내용을 볼 수 있습니다.

그럼 하나만 더 푸시해 볼까요?

① a.txt 파일에 문자 B를 추가한 뒤 저장하겠습니다.
② 이를 스테이지에 추가하고, 커밋해 보세요. 커밋 메시지는 second commit으로 하겠습니다.
git commit -am "second commit"
③ 이제 git push를 입력해 보세요. 앞서 -u 옵션과 함께 푸시했기 때문에 단순히 git push만 입력해도 됩니다.
git push
④ 성공적으로 푸시된 것을 확인해 보세요. 두 번째 커밋이 원격 저장소에 잘 반영됐네요.

4. git fetch: 원격 저장소를 일단 가져만 오기

패치란 원격 저장소의 변경 사항을 로컬 저장소에 병합하지 않고 '일단 가져만 오는'방법이라고 했습니다.

① 우선 git log 명령으로 지금까지의 로컬 저장소 상황을 파악해 봅시다. 로컬 저장소의 main 브랜치와 원격 저장소의 main 브랜치(origin/main)에는 모두 동일하게 커밋 두 개가 쌓여 있습니다. 달리 말해, 현재 로컬 저장소와 원격 저장소의 상태는 동일한 것이죠.

② 그렇다면 깃허브에서 직접 세 번째 커밋을 추가하고, 이를 로컬 저장소로 패치해 보겠습니다. 원격 저장소로 접속한 뒤 a.txt 파일을 클릭하세요.
③ 연필 아이콘을 클릭합니다.
④ 세 번째 줄에 문자 C를 입력하세요.
⑤ 커밋하겠습니다. 커밋 메시지는 add C in a.txt로 하겠습니다. 커밋 메시지를 입력했다면 Commit changes를 클릭하세요.
⑥ 자, 이렇게 문자 C를 추가하는 새로운 커밋이 추가됐습니다.

로컬 저장소에는 커밋이 두 개 쌓여 있지만, 원격 저장소에는 세 개가 쌓여 있지요.

⑦ 이런 상황에서 패치하면 어떻게 될까요? 패치하는 명령은 git fetch 또는 git fetch 또는 git fetch <원격 저장소 이름>입니다. git fetch를 입력해 보세요.
⑧ git status를 입력해 보세요. 잘 읽어보면 Your branch is behind 'origin/main' by 1 commit이라는 메시지를 볼 수 있습니다. 현재 브랜치는 origin/main 브랜치에 비해 커밋 하나가 뒤쳐진다는 의미입니다. 달리 말해, origin/main 브랜치는 현재 main 브랜치에 비해 한 커밋 앞서 있다는 의미입니다.

패치 직후 main 브랜치가 origin/main 브랜치에 비해 커밋 하나가 뒤쳐지는 이유는 패치는 원격 저장소의 변경 사항을 origin/main 브랜치로 가져올 뿐 main 브랜치는 변함이 없기 때문입니다. 즉, 패치는 원격 저장소의 변경 사항을 '일단 가지고 올 뿐' 로컬 저장소의 브랜치로 병합하지는 않는다는 걸 알 수 있습니다.
⑨ 6장에서 브랜치 간 차이를 비교하는 명령은 git diff라고 했죠? git diff main origin/main 명령으로 로컬 저장소의 main 브랜치와 원격 저장소 origin의 main 브랜치를 비교해 보세요. 깃허브에서 추가한 변경 사항, 즉 +C가 보인다면 성공입니다.

git diff main origin/main

⑩ 그럼 원격 저장소의 브랜치로 체크아웃해 봅시다. git checkout origin/main 명령을 입력하세요.
git checkout origin/main

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
패치한결과를 가리키는 FETCH_HEAD
git checkout FETCH_HEAD 명령으로도 체크아웃할 수 있습니다. FETCH HEAD는 최근에 패치한 브랜치의 최신 커밋을
가리키기 때문이지요. 이 예시의 경우 FETCH_HEAD는 깃허브에서 추가한 커밋(add C in a.txt)을 가리킵니다.

git checkout FETCH_HEAD

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

⑪ git log로 origin/main의 커밋 목록을 봅시다. 깃허브에서 추가한 세 번째 커밋을 확인할 수 있습니다.

git log

⑫ 자, 이제 패치한 결과를 로컬 저장소의 main 브랜치로 병합해 보겠습니다. 다시 main 브랜치로 체크아웃하세요.

git checkout main

⑬ git merge origin/main 명령으로 원격 저장소 origin/main 브랜치를 로컬 저장소의 main 브랜치로 병합하겠습니다.
git merge origin/main

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TIP
git merge FETCH_HEAD 명령을 이용해도 무방합니다.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

⑭ git log로 명령 결과를 확인합니다. 깃허브에서 추가한 세 번째 커밋을 main 브랜치로 병합했습니다.
git log

⑮ a.txt 파일을 직접 열어 깃허브에서 만든 변경 사항을 확인해 봅시다. 잘 반영됐죠?

5. git pull : 원격 저장소를 가져와서 합치기

풀은 앞서 설명한 패치와 병합을 동시에 하는방식입니다.

① 깃허브에서 새로운 커밋을 추가하겠습니다. 깃허브에서 a.txt 파일을 클릭해 보세요.
② 파일을 깃허브에서 직접 수정하기 위해 연필 아이콘을 클릭합니다.
③ 마지막 줄에 다음과 같이 문자 D를 추가하세요.
④ 커밋하겠습니다. 커밋 메시지로 add D in a.txt를 입력하고 Commit changes를 클릭하세요.
⑤ 이렇게 문자 D를 추가하는 새로운 커밋을 추가했습니다.
원격 저장소에는 로컬 저장소에는 없는 커밋을 추가했습니다.
⑥ 원격 저장소의 변경 사항을 풀하기 전에 git log 명령으로 현재 로컬 저장소의 커밋 목록을 확인해 보세요.

git log

⑦ 자, 이제 원격 저장소의 변경 사항을 풀 해보겠습니다. 명령은 git pull 또는 git pull <원격 저장소 이름>입니다. git pull을 입력해 보세요.
git pull

⑧ 다시 git log 명령으로 로컬 저장소의 커밋 목록을 확인해 보세요. 앞서 깃허브에서 추가한커밋이 main 브랜치에 병합된 것을 확인할 수 있습니다.
⑨ 직접 a.txt 파일을 확인해 보세요. 깃허브에서 추가한 문자 D를 확인할 수 있습니다.

즉, 풀은 원격 저장소의 변경 사항을 로컬 저장소로 가져옴과 동시에 병합까지 해주는 방식임을 알 수 있습니다. 다시 말해, 풀은 패치와 달리 원격 저장소를 '가져와서 합치는' 방식이라는점을 알 수 있지요.

8.2 깃 명령으로 풀 리퀘스트 보내기

풀 리퀘스트를 보내는 과정은 다음과 같았습니다.
1. 기여하려는 저장소를 본인 계정으로 포크하기
2. 포크한 저장소를 클론하기
3. 브랜치 생성 후 생성한 브랜치에서 작업하기
4. 작업한 브랜치 푸시하기
5. 풀 리퀘스트 보내기

① 풀 리퀘스트의 첫 번째 단계는 '기여하려는 저장소를 본인 계정으로 포크하기'입니다. 조장 계정의 collaboration 저장소로 풀 리퀘스트를 보낼 예정이므로 https://github.com/조장계정/collaboration에 접속한 후 Fork를 눌러보세요.

URL htpps://github.com/조장계정/collaboration

////////////////////////////////////////////////////////////////////////////////////////////////////////////////

만일 이미 collaboration 저장소가 포크되어 있다면?
이미 collaboration 저장소를 여러분의 계정으로 포크했을 경우, 포크한 저장소를 클론하기 전에 잊지 말고 확인해야 하는 단계가 있습니다.
여버분의 계정으로 포크된 저장소로 들어가보면, This is X commits behind 계정이름/collaboration:main 메시지가 떠 있을 수 있습니다.
(예 This branch is 5 commits behind kangtegong/collaboration:main.)

이 메시지는 포크된 저장소가 원본 저장소에 비해 몇 커밋 뒤쳐져 있다는 것을 의미합니다. 포크가 뭐라고 했었죠? 여러분의 원격 저장소를 복제하는 것이라 했습니다.
여러분의 계정으로 원격 저장소를 포크(복제)한 이후로도 원래의 원격 저장소에는 계속해서 새로운 커밋이 쌓일 수 있습니다. 이 경우 여러분의 계정으로 포크한 원격 저장소는 원본 저장소에 비해 몇 커밋 뒤쳐지게 되겠지요.
그래서 이 경우 여러분의 계정으로 포크한 원격 저장소가 원본 자장소에 비해 뒤쳐지지 않도록 맞춰주어야 합니다. 이는 Fetch upstream을 클릭한 후 Fetch and merge를 클릭하면 됩니다. 참고로 upstream은 포크했던 원본 저장소를 의미합니다.

This branch is up to  date with kangtegong/collaboration:main 메시지가 뜬다면 여러분의 계정으로 포크한 저장소와 kangtegong 계정의 collaboration이 동일하게 맞춰진 것입니다. 이제 포크한 여러분의 저장소를 클론받으면 됩니다.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

② 이제 이 저장소를 여러분의 컴퓨터로 클론하겠습니다. Code를 클릭하고 SSH를 클릭한 후 원격 저장소 경로를 복사해 주세요.
이때 조장 계정의 collaboration 저장소가 아닌 여러분 계정으로 포크한 collaboration 저장소를 클론받아야 합니다.

③ 클론받으려는 경로에서 깃 배시를 열어주세요. 여기에서는 C:\ 경로에 클론받기 위해 이 경로에서 깃 배시를 열겠습니다. 그런 다음 git clone을 입력한 후 복사한 경로를 붙여넣습니다. 원격 저장소를 클론하는 명령은 git clone <원격 저장소>였습니다.

git clone <원격 저장소>
④ 자, 이렇게 포크한 원격 저장소를 여러분의 컴퓨터로 클론받았습니다.
⑤ cd <경로> 명령은 <경로>로 이동하는 명령입니다. cd collaboration 명령을 입력하여 클론받은 원격 저장소로 이동하세요.

cd collaboration/

⑥ 풀 리퀘스트의 세 번째 단계는 '브랜치 생성 후 생성된 브랜치에서 작업하기'입니다. 브랜치를 만드는 명령은 앞선 장에서 배운 적이 있었습니다. git branch <브랜치 이름>이었죠? 브랜치 이름은 자유롭게 정해도 무방합니다. 가령 add_myname 이라는 브랜치를 만들고 싶다면 git branch add_myname 명령을 입력하면 됩니다.

git branch add_myname

⑦ 브랜치를 만들었다면 이제 만들어진 브랜치로 체크아웃하겠습니다.
git checkout add_myname

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
TIP
브랜치를 만듦과 동시에 체크아웃하는 명령도 배웠습니다. git checkout -b <브랜치 이름>이었지요. 즉, git branch add_myname 명령과 git checkout add_myname 명령을 연이어 입력하는 대신 git checkout -b add_myname 명령을 입력해도 됩니다.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

⑧ 지금까지 여러분은 포크한 저장소에서 브랜치를 만들고, 해당 브랜치로 체크아웃까지 했습니다. 이제 여기서 여러분이 하려면 작업(<li>태그로 깃허브 아이디 추가하기)을 하면 됩니다. 메모장이나 코드 편집기로 index.html을 열어주세요.
⑨ </ul> 태그 위에 여러분의 이름을 적어주세요.
⑩ 이제 이 변경 사항을 커밋하고 푸시하면 됩니다. 커밋하기 전, git diff 명령으로 변경 사항이 올바르게 만들어졌는지 확인해 보세요. 여러분의 이름이 추가됐다면 올바르게 작업한것입니다.
⑪ 이제 index.html을 커밋하세요. 커밋 메시지는 add myname in index.html로 하겠습니다.

git add index.html
git commit -m "add myname in index.html"

⑫ 이제 풀 리퀫스트의 네 번째 단계, '작업한 브랜치 푸시하기'입니다. add_myname이라는 브랜치를 원격 저장소 origin에 푸시하겠다는 의미로 git push origin add_myname 명령을 입력하면 add_myname 브랜치가 원격 저장소 origin에 푸시됩니다.
git push origin add_myname

⑬ 자, 마지막으로 풀 리퀘스트를 보냅시다. 포크한 원격 저장소롤 돌아가보면 Compare & pull request 버튼이 생겼을 겁니다. 이를 클릭해 보세요.
⑭ Create pull request 버튼을 클릭하세요.

⑮ 이렇게 조장 계정의 collaboration 저장소에 pull request가 생성됐습니다.
⑯ 여기까지 잘 했다면 여러분의 할 일은 끝입니다. 이제 collaboration 저장소의 소유자인 조장이 여러분의 풀 리퀘스트를 병합해 주거나, 댓글을 달아줄 겁니다. 

⑰ 풀리퀘스트가 병합됐다면 조장이 collaboration 저장소에서 여러분의 변경 사항을 확인할 수 있습니다.

8.3 더 나아가기
git
명령어들을 확인할 수 있다.

1. git <명령> -: 매뉴얼 페이지 보기
깃 명령 뒤에 -를 치면 해당 명령에 대한 자세한 설명이 담긴 매뉴얼 페이지가 브라우저로 열립니다.

① 가령 git commit 명령에 대한 자세한 설명을 보기 위해 git commit -h를 입력해 볼까요?
git commit -h

깃 공식 사이트
git-scm.com
① 공식 사이트에 접속한 다음 Documentation을 클릭.
③ Reference를 클릭

깃 도서
https://git-scm.com/book/ko/v2

깃 유저 매뉴얼
https://mirrors.edge.kernel.org/pub/software/scm/git/docs/user-manual.html

명령어 정리 노트

git clone <원격 저장소>				원격 저장소를 복제하기

git remote						git remote add origin <원격 저장소 이름> <원격 저장소>			<원격 저장소> 추가하기
							git remote											원격 저장소 이름 조회하기
							git remote --verbose									원격 저장소 이름과 경로 조회하기
							git remote -v
							git remote rename <기존 원격 저장소 이름> <바꿀 원격 저장소 이름>	원격 저장소 이름을 <기존 원격 저장소 이름>에서 <바꿀 원격 저장소 이름>으로 변경하기
							git remote remove <원격 저장소 이름>						원격 저장소 삭제하기

git push						git push <원격 저장소 이름> <브랜치>						<원격 저장소 이름>에 <브랜치>를 밀어넣기
git fetch						git fetch <원격 저장소 이름>								원격 저장소를 일단 가져만 오기
git pull						git pull <원격 저장소 이름>								원격 저장소를 가져와서 합치기
gti <명령> --help																	<명령>에 대한 매뉴얼 페이지 보기


